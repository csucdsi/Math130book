[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Preface & Course Overview\nThis notebook was created to host learning materials for Math 130: Introduction to R at California State University, Chico.\nMath 130 is designed as a short-course “primer” to be taken before, or concurrently with, an upper division or graduate level Statistics course such as Math 315 or Math 615.\nThe goal of Math 130 is to get the complete novice up and running with the basic knowledge of how to use the statistical programming language R in an environment that emphasizes reproducible research and literate programming for data analysis. We recognize there are many topics and many approaches to teach an introduction to the R programming language. We have picked specific topics and methods that we believe learners will need to succeed in subsequent classes.\nThe target audience is anyone who wants to do their own data analysis. The course will culminate with an exploratory data analysis on either a pre-specified data set or your data set of choice.",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#logistics",
    "href": "index.html#logistics",
    "title": "Introduction to R",
    "section": "Logistics",
    "text": "Logistics\nThis course may be offered as in person or (a)synchronous online. Regardless of the mode of instruction, all learning materials are found on this website. Class time (when applicable) is spent expanding on ideas and concepts, working through assignments as a class or in pairs.\nThe logistics of the course varies slightly by instructor and mode of instruction. See below for your specific section.",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#syllabus-for-current-term",
    "href": "index.html#syllabus-for-current-term",
    "title": "Introduction to R",
    "section": "Syllabus for current term",
    "text": "Syllabus for current term\n\nHTML webpage\nDownloadable PDF",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#callout-boxes-and-icons",
    "href": "index.html#callout-boxes-and-icons",
    "title": "Introduction to R",
    "section": "Callout boxes and icons",
    "text": "Callout boxes and icons\n\n\n\n\n\n\nblue boxes\n\n\n\nmean this is a note\n\n\n\norange boxes\nmeans danger. so this is red?\n\n\n\n\n\n\n\nyellow boxes\n\n\n\nmeans caution\n\n\n\n\n\n\n\n\ngreen box\n\n\n\nis a tip or an example\n\n\n\n\n\n\n\n\nthis is important\n\n\n\nnot sure what color\n\n\n\n:cinema: associated video\n:pencil2: You try it\n:x: Don’t do this thing",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#tool-choices",
    "href": "index.html#tool-choices",
    "title": "Introduction to R",
    "section": "Tool choices",
    "text": "Tool choices\n\nR + R Studio = Success\n\nThe term R refers to both the programming language and the software that interprets the scripts written using it.\nRStudio is currently a very popular way to not only write your R scripts but also to interact with the R software.\nWe will be programming in the R language, using the R Studio platform. You will have to install both onto your computer. Setup instructions are discussed later in section FIXME\n\n\n\nWhy use R?\n\nOpen source, cross-platform, and free\nGreat for reproducibility\nFlexible and extensible. Doesn’t do something you want? Create a custom function for yourself.\nTons of learning resources\nCurrently R is used in all of Chico’s upper division Statistics & Data Science courses, as well as in some Science, Public Health, Economics, Finance, and some graduate courses.\nDoes not involve lots of pointing and clicking (that’s a good thing!)\nWorks on data of all shapes and sizes\nProduces high-quality graphics\nLarge and welcoming community\n\n\n\nWhy use R Studio?\n\nCustomizable workspace that docks all windows together.\nNotebook formats that allow for easy sharing of code and output, and integration with other languages (Python, C++, SQL, Stan)\nSyntax highlighting, warning errors when missing a closing parentheses.\nCross-platform interface. Also works on Windows/iOS/Linux.\nTab completion for functions. Forget the syntax or a variable name? Popup helpers are available.\nFree training videos available from the developers directly.\nOne button publishing of reproducible documents such as reports, interactive visualizations, presentations (like this one!), websites.\n\n\n\nmake this side by side and add appropriate alt text\n \nLeft photo credit; Right photo credit. Entire figure credit: Data Carpentry R for Social Scientists.\n\n\ncheck this link\n\nExamples of things you can do in RStudio",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#programming-is-scary",
    "href": "index.html#programming-is-scary",
    "title": "Introduction to R",
    "section": "Programming is scary!",
    "text": "Programming is scary!\n\n\ncheck links\n\nLearning to program has other benefits\n\nImproves your logical skills and critical problem solving\nIncreases your attention to detail\nIncreases your self reliance and empowers you to control your own research.\nYour PI will love your awesome graphics and reports.\nSome people think what you do is magic.\nThinking graduate school? [expect to learn this on your own]\n[A few] [other lists] [of reasons]\n\n\nWhy no point and click?\nBecause it’s not reproducible.\n\nWhich boxes did you click last time?\nNew data? Gotta do it all over.\nNeed to expand your model? Gotta do it all over.\nMade a mistake in the data coding? Gotta do it all over…",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Introduction to R",
    "section": "References",
    "text": "References\nSome of this material presented is a derivation from work that is Copyright © Software Carpentry (http://software-carpentry.org/) which is under a CC BY 4.0 license which allows for adaptations and reuse of the work.",
    "crumbs": [
      "Preface & Course Overview"
    ]
  },
  {
    "objectID": "setup_tools.html",
    "href": "setup_tools.html",
    "title": "1  Your New Tools",
    "section": "",
    "text": "1.1 Setup your class folder for success! :cinema:\nUsing a consistent folder structure across your projects will help keep things organized, and will also make it easy to find/file things in the future. This can be especially helpful when you have multiple projects.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "setup_tools.html#setup-your-class-folder-for-success-cinema",
    "href": "setup_tools.html#setup-your-class-folder-for-success-cinema",
    "title": "1  Your New Tools",
    "section": "",
    "text": "link to chapter video?\n\n\n\n1.1.1 Naming Things\nYou also need to choose a naming convention for your class folder and stick with it. Recommended options are:\n\nALL CAPS (MATH130)\n\nno caps (math130)\nsnake_case (math_130)\nCamelCase (Math130)\n\n\n\n1.1.2 Create Folders\n\nOn your computer, in an easy to find place, create a new folder named math130.\nThen create three subfolders: data, homework, notes.\n\n\n\n\n1.1.3 Adding files into your class folder\nWhen you download a file, right click and “Save as” or “Save target as” and actively choose where to download this file.\n:x: Do not let files live in your downloads folder.\n:x: Do not open any files from your browser window after downloading.\n:pencil2: Right click [this link] to download and save Assignment 1 into your homework folder now.\n\nneed to fix hw1 link loc and qmd\n\n:cinema: Windows video walk through.\n\nto what?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "setup_tools.html#installing-r-and-r-studio",
    "href": "setup_tools.html#installing-r-and-r-studio",
    "title": "1  Your New Tools",
    "section": "1.2 Installing R and R Studio",
    "text": "1.2 Installing R and R Studio\n\n1.2.1 Tablet and Chromebook users\nIf you are using a tablet, Chromebook or otherwise do not have a computer that you can install programs on, you can use Posit Cloud for this class.\n\nMake a Cloud FREE account at https://posit.cloud/plans/free\nStart a new project by clicking on the button in the top right corner\nThen go to slide #6 to learn how to navigate RStudio.\n\nThe free account allows for 25 project hours/month, which may not be enough for this class. If you run into time limits or you are using this for another class you will have to upgrade to the Cloud Student plan which is $5/month.\n\nUsing the cloud is easier to initially setup, but having your own installation on your computer ensures that\n\nyou want to keep the program free forever\nyou will be able to put your files under version control\nyou always have access to your code even with unstable or no internet",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "setup_tools.html#download-and-install-r",
    "href": "setup_tools.html#download-and-install-r",
    "title": "1  Your New Tools",
    "section": "1.3 Download and install R",
    "text": "1.3 Download and install R\n\n\n\n\n\n\n1.3.1 Step 1: Download R v 4.5+\n\nWindows 10 https://cran.r-project.org/bin/windows/base/\nMac OS X page - https://cran.r-project.org/bin/macosx/\n\nFirst link under “Latest Release” and looks like R-4.5.0.pkg.\n:warning: You may later get a message about needing X11 or XQuartz. The download for that program is also on this page. (Mac only)\n\nChoose to save the file, do not open or run.\n\n\n\n1.3.2 Step 2: Install R\n\nInstall R by double clicking on the downloaded file and following the prompts.\n\nDefault settings are OK.\nDelete any desktop shortcuts that was created (looks like the icon above.)\n\n\n\n\n\n\n\n\n🎦 Video Tutorials for both R and R Studio.\n\n\n\n\nWindows\nMac",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "setup_tools.html#download-and-install-r-studio",
    "href": "setup_tools.html#download-and-install-r-studio",
    "title": "1  Your New Tools",
    "section": "1.4 Download and install R Studio",
    "text": "1.4 Download and install R Studio\n\n\n\n\n\n\n1.4.1 Step 1: Download the most recent version from\n\nhttps://posit.co/download/rstudio-desktop/\nYour operating system should be automatically detected. If not, scroll down and choose your version.\n\n\n\n1.4.2 Install the program\n\nWindows: Double click on the downloaded file to run the installer program.\nMac: Double click on the downloaded file, then drag the R Studio Icon into your Applications folder.\n\nAfter you are done, eject the “Drive” that you downloaded by dragging the icon to your trash.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "setup_tools.html#navigating-r-studio",
    "href": "setup_tools.html#navigating-r-studio",
    "title": "1  Your New Tools",
    "section": "1.5 Navigating R Studio",
    "text": "1.5 Navigating R Studio\nWe will be interacting with the programming language R only through R Studio. Not by itself. There are four panes, or windows, in R Studio.\n\nupdate to newest carpentry instructions\n\n\n\n\n\n\n\nyellow for videos?\n\n\n\n🎦 Watch one of the following short videos to learn how to navigate R Studio.\n\nR Girls on YouTube\nDr. D’s overview\n\n\n\n\n1.5.1 Setting preferences in R Studio\nAKA: Retain sanity while troubleshooting\n\nside by side/text image\n\n\nOpen R Studio and go to the file menu go to Tools then Global Options.\nUncheck “Restore .RData into workspace at startup”\nWhere it says “Save workspace to .RData on exit:” Select “Never””\nClick apply then ok to close that window.\n\nThis will ensure that when you restart R you do not “carry forward” objects such as data sets that you were working on in a prior assignment.\nTo effectively restart R, go to the file menu and click Session , then “Restart R”, or “Restart R and clear output”. :cinema: Link to video walk through",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Your New Tools</span>"
    ]
  },
  {
    "objectID": "intro_r.html",
    "href": "intro_r.html",
    "title": "2  Programming with R",
    "section": "",
    "text": "2.1 Terminology\nThe basis of programming is that we write down instructions for the computer to follow, and then we tell the computer to follow those instructions.\nWe write, or code, instructions in R because it is a common language that both the computer and we can understand.\nWe call the instructions commands and we tell the computer to follow the instructions by executing (also called running) those commands.\nThe console pane is the place where commands written in the R language can be typed and executed immediately by the computer. It is also where the results will be shown for commands that have been executed.\nYou can type commands directly into the console and press Enter to execute those commands, but they will be forgotten when you close the session.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#code-appearance",
    "href": "intro_r.html#code-appearance",
    "title": "2  Programming with R",
    "section": "2.2 Code appearance",
    "text": "2.2 Code appearance\nIn these notes, code is displayed like this:\n\n2+2\n\nwhere the output or result of the code is displayed with two pound signs (##)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#r-is-an-overgrown-calculator",
    "href": "intro_r.html#r-is-an-overgrown-calculator",
    "title": "2  Programming with R",
    "section": "2.3 R is an overgrown calculator",
    "text": "2.3 R is an overgrown calculator\n\ncan I use webR for this page?\n\n:pencil: In the console type the following code, then press Enter.\n\n2+2\n\n[1] 4\n\n\nNow try a more complicated equation.\n\n2 + 5*(8^3)- 3*log10)\n\nUh oh, we got an Error. Nothing to worry about, errors happen all the time.\n:pencil: Put a open parenthesis ( before log10 to fix it and try again.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#packages",
    "href": "intro_r.html#packages",
    "title": "2  Programming with R",
    "section": "3.1 Packages",
    "text": "3.1 Packages\n_“Where the real money from the movie is made._”\nR is considered an Open Source software program. That means many (thousands) of people contribute to the software. They do this by writing commands (called functions) to make a particular analysis easier, or to make a graphic prettier.\nWhen you download R, you get access to a lot of functions that we will use. However these other user-written packages add so much good stuff that it really is the backbone of the customizability and functionality that makes R so powerful of a language.\nFor example we will be creating graphics using functions like boxplot() and hist() that exist in base R. But we will quickly move on to creating graphics using functions contained in the ggplot2 package. We will be managing data using functions in dplyr and reading in Excel files using readxl. Installing packages will become your favorite past-time.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#installing-packages",
    "href": "intro_r.html#installing-packages",
    "title": "2  Programming with R",
    "section": "3.2 Installing Packages",
    "text": "3.2 Installing Packages\n:pencil: Start by typing the following in the console to install the ggplot2 package.\n\ninstall.packages(\"ggplot2\")\n\nWhen the download and install is complete, you should see a message simliar to:\nThe downloaded binary packages are in\n    C:\\Users\\Robin\\AppData\\Local\\Temp\\Rtmpi8NAym\\downloaded_packages\n:warning: R is case sensitive and spelling matters. If you get an error message like the following:\nWarning in install.packages :\n  package ‘ggplot’ is not available (for R version 3.5.1)\nThe correct package name is ggplot2, not ggplot.\n\n\n\n\n\n\nCaution\n\n\n\nAlternative Method of installing Packages:\nUse the Package tab in the lower right pane in R Studio.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#install-all-the-things",
    "href": "intro_r.html#install-all-the-things",
    "title": "2  Programming with R",
    "section": "3.3 Install all the things!",
    "text": "3.3 Install all the things!\nNow that you’re a package installing pro, go ahead and install the following packages that we will be using in the next few weeks.\n\nset as two columns\n\nInstall the list of packages to the left one at a time and wait for it to finish before entering the next command.\n\ntidyverse\nrmarkdown\nopenintro\ntinytex",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#download-and-install-tinytex",
    "href": "intro_r.html#download-and-install-tinytex",
    "title": "2  Programming with R",
    "section": "3.4 Download and Install TinyTex",
    "text": "3.4 Download and Install TinyTex\nTo convert your work into a professional looking PDF, or to write math symbols in your homework, or you need a typesetting program called \\(\\LaTeX\\) (pronounced “lay-tek” or “lah-tex”). It’s a super neat program, but also nearly 4Gb. Too big for our needs. That’s where the tinytex package came from. we’re going to use it to install a lightweight version of \\(\\LaTeX\\). This will let us write math equations in R Markdown, and create PDF’s of your homework.\nIn your console type the following and hit Enter\ntinytex::install_tinytex()\nThis may take a few minutes, but then you’re good to go!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#seeking-help",
    "href": "intro_r.html#seeking-help",
    "title": "2  Programming with R",
    "section": "3.5 Seeking Help",
    "text": "3.5 Seeking Help\n\nhelp me help you\n\nSometimes a second pair of eyeballs is all you need\n](img/debugging.jpg){fig-align=“center” width=“149”}\nMuch of this information is also on the FAQ page\n\nstill accurate?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#advice-on-asking-for-help",
    "href": "intro_r.html#advice-on-asking-for-help",
    "title": "2  Programming with R",
    "section": "3.6 Advice on asking for help",
    "text": "3.6 Advice on asking for help\nThe key to receiving help from someone is for them to rapidly grasp your problem. You should make it as easy as possible to pinpoint where the issue might be.\nTry to use the correct words to describe your problem. For instance, a package is not the same thing as a library. Most people will understand what you meant, but it can make things confusing for people trying to help you. Be as precise as possible when describing your problem.\n:warning: Don’t let not knowing exactly how to describe your problem prevent you from asking. Screenshots help tremendously!\nWhen asking someone for help try to 1. Explain what thing you are trying to do 2. Explain/show the code you wrote to try to do that thing 3. Explain/show your result, and if it’s not obvious explain why you feel it’s not the correct result. (E.g. you expected the answer to be 5, but instead it’s 10. )\n:warning: Don’t spend more than 20 minutes banging your head on the wall before you ask for help!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#help-from-inside-r-studio",
    "href": "intro_r.html#help-from-inside-r-studio",
    "title": "2  Programming with R",
    "section": "3.7 Help from inside R Studio",
    "text": "3.7 Help from inside R Studio\n\n3.7.1 Use the built-in RStudio help interface to search for more information on R functions\nOne of the fastest ways to get help is to use the RStudio help interface. This panel by default can be found at the lower right hand panel of RStudio. As seen in the screenshot, by typing the word mean, RStudio tries to also give a number of suggestions that you might be interested in. The description is then shown in the display window.\n\n\n3.7.2 I know the name of the function I want to use, but I’m not sure how to use it\nIf you need help with a specific function, let’s say barplot(), you can type:\n\n?barplot\n\nIf you just need to remind yourself of the names of the arguments, you can use:\n\nargs(lm)\n\n\n\n3.7.3 I want to use a function that does X, there must be a function for it but I don’t know which one…\nIf you are looking for a function to do a particular task, you can use the help.search() function, which is called by the double question mark ??. However, this only looks through the installed packages for help pages with a match to your search request\n\n??kruskal\n\nIf you can’t find what you are looking for, you can use the rdocumentation.org website that searches through the help files across all packages available.\nFinally, a generic Google or internet search “R &lt;task&gt;” will often either send you to the appropriate package documentation or a helpful forum where someone else has already asked your question.\n\n\n3.7.4 I get an error message that I don’t understand\nStart by googling the error message. However, this doesn’t always work very well because often, package developers rely on the error catching provided by R. You end up with general error messages that might not be very helpful to diagnose a problem (e.g. “subscript out of bounds”). If the message is very generic, you might also include the name of the function or package you’re using in your query.\nIf you check Stack Overflow, search using the [r] tag. Most questions have already been answered, but the challenge is to use the right words in the search to find the answers: http://stackoverflow.com/questions/tagged/r\n:warning: Development of R moves pretty fast. When at all possible, use results from the past 1-2 years. Anything over 5 years old for packages such as ggplot, dplyr, and forcats are likely obsolete.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#in-person-help",
    "href": "intro_r.html#in-person-help",
    "title": "2  Programming with R",
    "section": "3.8 In Person help",
    "text": "3.8 In Person help\n\nStart by ask the person sitting next to you! Don’t hesitate to talk to your neighbor, compare your answers, and ask for help.\nAsk in the Math & Statistics Discord server - we have a dedicated channel just for this class but a lot of students in the server know how to use R.\nAttend Community Coding.\n\nDrop in work session & dedicated space to work on coding projects.\nCollaborate with your peers and learn from experts.\nSome hours are held over Zoom",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#other-online",
    "href": "intro_r.html#other-online",
    "title": "2  Programming with R",
    "section": "3.9 Other Online",
    "text": "3.9 Other Online\n\nIn RStudio go to Help –&gt; Cheatsheets or to this URL https://posit.co/resources/cheatsheets/\nStack Overflow: if your question hasn’t been answered before and is well crafted, chances are you will get an answer in less than 5 min. Remember to follow their guidelines on how to ask a good question.\nChico R Users Google Group.\nThe Posit Community: it is read by a lot of people and is welcoming to new users.\nIf your question is about a specific package, see if there is a mailing list for it. Usually it’s included in the DESCRIPTION file of the package that can be accessed using `packageDescription(“name-of-package:. You may also want to try to email the author of the package directly, or open an issue on the code repository (e.g., GitHub).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#using-ai-tools",
    "href": "intro_r.html#using-ai-tools",
    "title": "2  Programming with R",
    "section": "3.10 Using AI tools",
    "text": "3.10 Using AI tools\n\nwrite guidance here",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#written",
    "href": "intro_r.html#written",
    "title": "2  Programming with R",
    "section": "3.11 Written",
    "text": "3.11 Written\nIf you’re a book kinda person, there is plenty of help available as well. Many have online versions or free PDF’s.\n\nR Markdown, the Definitive Guide: https://bookdown.org/yihui/rmarkdown/\nR for Data Science https://r4ds.had.co.nz/\nCookbook for R http://www.cookbook-r.com/\nR Graphics Cookbook (I use this all the time) – Chapter 8 in the above link\nThe Art of R Programming https://nostarch.com/artofr.htm\nR for… http://r4stats.com/\n\nExcel Users https://www.rforexcelusers.com/\nSAS and SPSS Users http://r4stats.com/books/r4sas-spss/\nSTATA Users http://r4stats.com/books/r4stata/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#saving-and-closing-your-work.",
    "href": "intro_r.html#saving-and-closing-your-work.",
    "title": "2  Programming with R",
    "section": "4.1 Saving and closing your work.",
    "text": "4.1 Saving and closing your work.\nUnless you’re returning to work in R Studio in a short while, you should make a habit to save all open tabs and completely shut down R studio when you are done working. This ensures your environment is cleared. This is a good thing.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "intro_r.html#restart-r",
    "href": "intro_r.html#restart-r",
    "title": "2  Programming with R",
    "section": "4.2 Restart R",
    "text": "4.2 Restart R\nTo restart R without shutting the entire window down, go to the file menu bar in the top,\n\nSession –&gt; Restart R and Clear Output\n\nThis is good to do when switching between projects/classes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programming with R</span>"
    ]
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "3  Reproducibility with Quarto",
    "section": "",
    "text": "3.1 Learning Objectives\nAfter completing this lesson learners will be able to create a new R markdown document, identify the components of a R Markdown document, and explain how R markdown files facilitates sharing of reproducible research.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#learning-objectives",
    "href": "quarto.html#learning-objectives",
    "title": "3  Reproducibility with Quarto",
    "section": "",
    "text": "3.1.1 Pre-requisites\n\nHave R and R Studio installed\nHave the following packages installed: rmarkdown",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#document-structure",
    "href": "quarto.html#document-structure",
    "title": "3  Reproducibility with Quarto",
    "section": "3.2 Document structure",
    "text": "3.2 Document structure\nR Markdown is an example of literate programming where the explanation of the program (or analysis) logic is presented in a natural language (such as English), with supporting pieces of code embedded in the document itself. R Markdown combines normal text such as this sentence, code and the output from the code all in one Rmarkdown (.Rmd) file.\nThe following page lays out the format of an RMarkdown document with several details included.\nImage credit on next page: Data Visualization by Kieran Healy. Available at http://socviz.co/",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#components-of-a-r-markdown-document",
    "href": "quarto.html#components-of-a-r-markdown-document",
    "title": "3  Reproducibility with Quarto",
    "section": "3.3 Components of a R Markdown document",
    "text": "3.3 Components of a R Markdown document\n‘../static/img/rmarkdown_components.png’",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#code-chunks",
    "href": "quarto.html#code-chunks",
    "title": "3  Reproducibility with Quarto",
    "section": "3.4 Code Chunks",
    "text": "3.4 Code Chunks\n\nCode chunks start with three back ticks (to the left of the 1) and an r in braces. Chunks close (end) with another three back ticks. Note the background color of this section has changed to a different shade. This helps you identify you have closed your code chunk properly.\nYou can insert code chunks by using the button in the top right of an RMD file (Insert –&gt; R), or by typing CTRL+ALT+I.\nOnly code goes in code chunks. That’s why they’re called code chunks.\n\nNo normal text.\nAll explanatory text goes outside a code chunk.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#test-your-setup",
    "href": "quarto.html#test-your-setup",
    "title": "3  Reproducibility with Quarto",
    "section": "3.5 Test your setup",
    "text": "3.5 Test your setup\nLet’s create your first markdown file!\n\nIn R Studio go to File –&gt; New File –&gt; R Markdown\nTitle this document My First R Markdown Document, then click OK.\nClick the small blue disk icon to save this file into your class folder.\nSave this file using the file name test_markdown_document.\n\nFile names cannot have spaces or special characters.\nDo not specify the file type. It will be set automatically.\n\nClick the KNIT button (has the yarn ball next to it) to convert this file into HTML.\nLook at the HTML file that was created. You should be able to match the code with the resulting output.\n\nThis is what we mean by reproducible. If you make a change in the code document, and re-knit (aka compile), your changes will be reflected in the generated document.\nIf you are asked to install additional packages, go ahead and say yes. Then go back to lesson 02 and make sure you have all the necessary packages listed.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#make-a-change",
    "href": "quarto.html#make-a-change",
    "title": "3  Reproducibility with Quarto",
    "section": "3.6 Make a change",
    "text": "3.6 Make a change\nPlay around with modifying the text and the R code.\n\nChange the code from summary(cars) to summary(iris).\n\nWrite a sentence below this code chunk. It could be “Hello world”.\nAdd a code chunk and type the equation 2+2 in the code chunk.\nRe-knit this document and observe your changes.\n\nYou are now ready to start the first assignment.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#start-assignment-1",
    "href": "quarto.html#start-assignment-1",
    "title": "3  Reproducibility with Quarto",
    "section": "3.7 Start Assignment 1",
    "text": "3.7 Start Assignment 1\n\nRight click and select save as (or save target as) to download [HW 1.Rmd] code file to your class folder.\nNavigate to your class folder and double click to open this file in R Studio\n\nYou might have to tell your computer what program to use.\nDo NOT open this file from your browser window.\n\nDouble click on this file (from your class folder) to open it in R studio.\nThis .Rmd file is a template for you to use to write your assignment. Write your answers directly into this document.\nAfter you answer each question, knit the file to ensure that your work is saved, and that your answers are being correctly displayed in the final document.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "quarto.html#additional-resources",
    "href": "quarto.html#additional-resources",
    "title": "3  Reproducibility with Quarto",
    "section": "3.8 Additional Resources",
    "text": "3.8 Additional Resources\n\nWhile the introductory video no longer works, there are additional lessons on using R Markdown at the following site: http://rmarkdown.rstudio.com/lesson-1.html\n\nRelevant portions in this tutorial are “How it works”, “Code Chunks”, and “Output Formats”\n\nGallery of the vast range of output and product types that you can create using R Markdown including PDF reports, interactive dashboards, maps, webpages like this one and more: https://rmarkdown.rstudio.com/gallery.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Reproducibility with Quarto</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html",
    "href": "programming_in_r.html",
    "title": "4  Getting Started with R",
    "section": "",
    "text": "4.1 Writing Scripts (Video)\nIn lesson 02 we saw that we could write R code in the console and get immediate results. There are two main ways of interacting with R: by using the console or by using script files (plain text files that contain your code). We will be working in R markdown files exclusively in this class, but it is important to be aware that there are also script files that have an extension of .R. These can contain code and comments only, not normal text sentences like this.\nBecause we want our code and workflow to be reproducible, and often your code may span several lines at a time, it is better to type the commands we want in a script, and save the script. This way, there is a complete record of what we did, and anyone (including our future selves!) can easily replicate the results on their computer. It’s also easier to fix mistakes this way, without having to retype in the entire command.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#writing-scripts-video",
    "href": "programming_in_r.html#writing-scripts-video",
    "title": "4  Getting Started with R",
    "section": "",
    "text": "4.1.0.0.1 Start a new Rmarkdown file\n\nGo to File –&gt; New File –&gt; R Markdown to open a new R markdown window.\nGive this file a name such as “Lesson 04 notes”, and put your name as the author.\nDelete all the template language below line 11.\n\nNow let’s go back to that long expression from lesson 2 (corrected), but this time type it into a new code chunk. Recall we can make a new code chunk by pressing CTRL+ALT+I, or by clicking on Insert then R. Also recall that we submit this code by pressing Ctrl+Enter or clicking the green play arrow in the top right corner of the code chunk.\n2 + 5*(8^3)- 3*log(10)\n\n\n4.1.0.0.2 Make a change to the above expression and run the command again.\nFor the rest of this lesson, retype each code chunk below into the notes file you just created. Be sure to annotate these notes as you would take notes in any other class. For you to retain what you are reading and learning, writing out what these pieces of code are doing (e.g. the assignment operator &lt;-) in your own words is an effective learning technique.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#creating-objects-in-r-video",
    "href": "programming_in_r.html#creating-objects-in-r-video",
    "title": "4  Getting Started with R",
    "section": "4.2 Creating objects in R (Video)",
    "text": "4.2 Creating objects in R (Video)\nTo do useful and interesting things, we need to assign values to objects. To create an object, we need to give it a name followed by the assignment operator &lt;-, and the value we want to give it:\n\nweight_kg &lt;- 55\n\n&lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3.\nObjects can be given any name such as x, current_temperature, or subject_id. However there are some naming guidelines you need to be aware of.\n\nYou want your object names to be explicit and not too long.\nThey cannot start with a number (2x is not valid, but x2 is).\nR is case sensitive (e.g., weight_kg is different from Weight_kg).\nThere are some names that cannot be used because they are the names of fundamental functions in R (e.g., if, else, for, see here for a complete list).\nIt’s best to not use other function names (e.g., c, T, mean, data, df, weights) because these already tend to be in use by different parts of R.\nSee Google’s style guide for more information.\n\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # but putting parenthesis around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nNow that R has weight_kg in memory, we can do arithmetic with it. For instance, we may want to convert this weight into pounds (weight in pounds is 2.2 times the weight in kg):\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change an object’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nThis means that assigning a value to one object does not change the values of other objects For example, let’s store the animal’s weight in pounds in a new object, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\n\nR executes code in top-down order. So what happens on line 10 occurs before line 11. What do you think is the current content of the object weight_lb? 126.5 or 220?\nComments. The comment character in R is #, anything to the right of a # in a script will be ignored by R. It is useful to leave notes, and explanations in your scripts as demonstrated earlier.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#functions-and-their-arguments-video",
    "href": "programming_in_r.html#functions-and-their-arguments-video",
    "title": "4  Getting Started with R",
    "section": "4.3 Functions and their arguments (Video)",
    "text": "4.3 Functions and their arguments (Video)\nFunctions are “canned scripts” that automate more complicated sets of commands including operations assignments, etc. Many functions are predefined, or can be made available by importing R packages (lesson 02).\nA function usually takes one or more inputs called arguments, and often (but not always) return a value.\nA typical example would be the function sqrt(). The input is the number 4, and the return value (the output) is the square root of 4, namely 2. Executing a function (‘running it’) is called calling the function.\n\nsqrt(4)\n\n[1] 2\n\n\nLet’s look into the round function.\n\nround(3.14159)\n\n[1] 3\n\n\nWe can learn more about this function by typing ?round. The Usage section of the help documentation shows you what the default values for each argument are. This is a very important piece to pay attention. Sometimes the default behaviors are not what you want to happen.\n\nround(x, digits=0)\n\nIn the Arguments section the help file defines what each argument does.\n\nx is the object that you want to round. It must be a numeric vector.\ndigits is an integer indicating the number of decimal places to round to.\n\nAbove, we called round() with just one argument, 3.14159, and it has returned the value 3. That’s because the default is to round to the nearest whole number. We see that if we want a different number of digits, we can type digits = 2 or however many we want.\n\nround(3.14159, digits = 2)\n\n[1] 3.14\n\n\nIf you provide the arguments in the exact same order as they are defined you don’t have to name them:\n\nround(3.14159, 2)\n\n[1] 3.14\n\n\nAnd if you do name the arguments, you can switch their order:\n\nround(digits = 2, x = 3.14159)\n\n[1] 3.14\n\n\nThis is a simple function with only one argument. Functions are the backbone of how R does it’s thing. You will get lots of practice with functions, and quickly encounter functions that require many arguments.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#data-types-video",
    "href": "programming_in_r.html#data-types-video",
    "title": "4  Getting Started with R",
    "section": "4.4 Data Types (Video)",
    "text": "4.4 Data Types (Video)\nR objects come in different data types.\n\n4.4.1 Numbers\nWhen a number is stored in an object it is now called a numerical variable. We can do math on numeric variables.\n\nim_a_number &lt;- 50\nim_a_number*2\n\n[1] 100\n\n\n\n\n4.4.2 Letters\nLetters, words, and entire sentences can also be stored in objects. These are then called character or string variables. We can’t do math on character variables, and if we try to R gives us an error message.\n\n(im_a_character &lt;- \"dog\")\n\n[1] \"dog\"\n\nim_a_character*2\n\nError in im_a_character * 2: non-numeric argument to binary operator\n\n\nIn statistics classes, character variables are often treated as categorical variables, which can also be called factor variables. Factor variables in R are special types of categorical variables. We will learn how to work with factor variables in week 2.\n\n\n4.4.3 Boolean\nWhen the value of an object can only be TRUE or FALSE it is called a Boolean variable. These are created by writing a logical statement where the answer is either TRUE or FALSE. Silly examples include “Is 3 greater than 4?” and “Is the square root of 4 equal to 2?”\n\n3&gt;4\n\n[1] FALSE\n\nsqrt(4)==2\n\n[1] TRUE\n\n\nWe will see how to use these logical statements to do things such as subsetting data and creating new variables.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#data-structures-video",
    "href": "programming_in_r.html#data-structures-video",
    "title": "4  Getting Started with R",
    "section": "4.5 Data Structures (Video)",
    "text": "4.5 Data Structures (Video)\nData structures is how we refer to a collection of pieces of data, like a series of numbers, or a list of words.\n\n4.5.1 Vectors\nA vector is the most common and basic data structure in R, and is pretty much the workhorse of R.\nWe can assign a series of values to a vector using the c() function. For example we can create a vector of animal weights and assign it to a new object weight_g:\n\n(weight_g &lt;- c(50, 60, 65, 82))\n\n[1] 50 60 65 82\n\n\nA vector can also contain characters:\n\n(animals &lt;- c(\"mouse\", \"rat\", \"dog\"))\n\n[1] \"mouse\" \"rat\"   \"dog\"  \n\n\nThe quotes around “mouse”, “rat”, etc. are essential here. Without the quotes R will assume objects have been created called mouse, rat and dog. As these objects don’t exist in R’s memory, there will be an error message.\nAn important feature of a vector, is that all of the elements are the same type of data. That is, each element in the vector has to be the same type. You can use the function class() to see what data type a vector is.\n\nclass(weight_g)\n\n[1] \"numeric\"\n\nclass(animals)\n\n[1] \"character\"\n\n\nIf you try to mix and match data types within a vector, some “coercion” will occur. If you combine letters and numbers, everything will be treated as letters.\n\n(mix_match &lt;- c(weight_g, animals))\n\n[1] \"50\"    \"60\"    \"65\"    \"82\"    \"mouse\" \"rat\"   \"dog\"  \n\nclass(mix_match)\n\n[1] \"character\"\n\n\nThis is VERY important to keep in mind when you import data into R from another program like Excel. If you have any letters (like the word “missing”, or “NA”) in a column, all data from that column will be treated as character strings. And you can’t do math (such as take a mean) on words.\nVectors are one of the many data structures that R uses. Other important ones are lists (list), matrices (matrix), data frames (data.frame), factors (factor) and arrays (array). We will only talk about vectors,data.frames and factors in this class (not all in this lesson).\n\n\n4.5.2 Doing math on vectors\nYou can perform math operations on the elements of a vector such as\n\nweight_KG &lt;- weight_g/1000\nweight_KG\n\n[1] 0.050 0.060 0.065 0.082\n\n\nWhen adding two vectors together, the elements in the same position are added to each other. So element 1 in the vector a is added to element 1 in vector b.\n\na &lt;- c(1,2,3)\nb &lt;- c(6,7,8)\na+b\n\n[1]  7  9 11\n\n\nMore complex calculations can be performed on multiple vectors.\n\nwt_lb &lt;- c(155, 135, 90)\nht_in &lt;- c(72, 64, 50)\nbmi &lt;- 703*wt_lb / ht_in^2\nbmi\n\n[1] 21.01948 23.17017 25.30800\n\n\nAll these operations on vectors behave the same way when dealing with variables in a data set (data.frame).\nIf you want to add the values within a vector, you use functions such as sum(), max() and mean()\n\nsum(a)\n\n[1] 6\n\nmax(b)\n\n[1] 8\n\nmean(a+b)\n\n[1] 9\n\n\n\n\n4.5.3 Subsetting vectors\nIf we want to extract one or several values from a vector, we must provide one or several indices in square brackets. For instance:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n\n[1] \"rat\"\n\nanimals[c(2, 3)]\n\n[1] \"rat\" \"dog\"\n\n\nThe number in the indices indicates which element to extract. For example we can extract the 3rd element in weight_g by typing\n\nweight_g[3]\n\n[1] 65\n\n\n\n\n4.5.4 Conditional subsetting\nAnother common way of subsetting is by using a logical vector. TRUE will select the element with the same index, while FALSE will not. Typically, these logical vectors are not typed by hand, but are the output of other functions or logical tests such as:\n\nweight_g &gt; 50  # returns TRUE or FALSE depending on which elements that meet the condition\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\nWe can use this output to select elements in a different vector where the value of that logical statement is TRUE. For instance, if you wanted to select only the values where weight in grams is above 50 we would type:\n\nweight_g[weight_g &gt; 50]\n\n[1] 60 65 82\n\n\nYou can combine multiple tests using & (both conditions are true, AND) or | (at least one of the conditions is true, OR):\nWeight is less than 30g or greater than 60g\n\nweight_g[weight_g &lt; 30 | weight_g &gt; 60]\n\n[1] 65 82\n\n\nWeight is between 60 and 80lbs\n\nweight_g[weight_g &gt;= 60 & weight_g &lt;= 80]\n\n[1] 60 65\n\n\nHere, &lt; stands for “less than”, &gt; for “greater than”, &gt;= for “greater than or equal to”, and == for “equal to”. The double equal sign == is a test for numerical equality between the left and right hand sides, and should not be confused with the single = sign, which performs variable assignment (similar to &lt;-).\nA common task is to search for certain strings in a vector. One could use the “or” operator | to test for equality to multiple values, but this can quickly become tedious. The function %in% allows you to test if any of the elements of a search vector are found:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[animals == \"cat\" | animals == \"rat\"] # returns both rat and cat\n\n[1] \"rat\" \"cat\"\n\nanimals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\")\n\n[1] FALSE  TRUE  TRUE  TRUE\n\nanimals[animals %in% c(\"rat\", \"cat\", \"dog\", \"duck\", \"goat\")]\n\n[1] \"rat\" \"dog\" \"cat\"\n\n\n\n\n4.5.5 Order matters.\nWhen considering string or character vectors or data elements, R treats everything in alphabetical order. Thus\n\n\"four\" &gt; \"five\"\n\n[1] TRUE\n\n\nThis will come back to bug you when dealing with categorical data types called factors in a later lesson. Don’t worry, we’ll show you how to be the boss of your factors and not let R tell you that “one” is greater than “four”.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "programming_in_r.html#data-frames-video",
    "href": "programming_in_r.html#data-frames-video",
    "title": "4  Getting Started with R",
    "section": "4.6 Data Frames (Video)",
    "text": "4.6 Data Frames (Video)\nData frames are like spreadsheet data, rectangular with rows and columns. Ideally each row represents data on a single observation and each column contains data on a single variable, or characteristic, of the observation. This is called tidy data. This is an important concept that you are encouraged to read more about if you will be doing your own data collection and research. This article is a good place to start.\nA data frame is the representation of data in the format of a table where the columns are vectors that all have the same length. Because columns are vectors, each column must contain a single type of data (e.g., characters, integers, factors). For example, here is a figure depicting a data frame comprising a numeric, a character, and a logical vector.\n\n\n\nfigure depicting a data frame\n\n\nFor this part of the lesson we will use a data set called diamonds that comes with the ggplot2 package that you installed as part of lesson 02. In a later lesson we will learn how to import data from an external file into R. We can load the diamonds data set into our global environment by typing\n\ndiamonds &lt;- ggplot2::diamonds\n\n\n4.6.0.0.1 To see the raw data values, click on the square spreadsheet icon to the right of the data set name in the top right panel of RStudio (circled in green in the image below).\n\n\n\nscreenshot of dataset in the global environment\n\n\nThis area also tells us a little bit about the data set, specifically that it has 53,940 rows and 10 variables.\nWhen data sets are very large such as this one, it may be difficult to see all columns or all rows. We can get an idea of the structure of the data frame including variable names and types by using the str function,\n\nstr(diamonds)\n\ntibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\nThe diamonds data set contains numeric variables such as carat, depth, and price, and ordered factor variables including the cut, color, and clarity of those diamonds.\n\n\n4.6.1 Inspecting data.frame objects\nHere is a non-exhaustive list of functions to get a sense of the content/structure of the data. Let’s try them out!\n\nSize:\n\ndim(diamonds) - returns a vector with the number of rows in the first element, and the number of columns as the second element (the dimensions of the object)\nnrow(diamonds) - returns the number of rows\nncol(diamonds) - returns the number of columns\n\nContent:\n\nhead(diamonds) - shows the first 6 rows\ntail(diamonds) - shows the last 6 rows\n\nNames:\n\nnames(diamonds) - returns the column names (synonym of colnames() for data.frame objects)\nrownames(diamonds) - returns the row names\n\nSummary:\n\nstr(diamonds) - structure of the object and information about the class, length and content of each column\nsummary(diamonds) - summary statistics for each column\n\n\nNote: most of these functions are “generic”, they can be used on other types of objects besides a data.frame\n\n\n4.6.2 Identifying variables\nData frames can be subset by specifying indices (as shown previously), but also by calling their column names directly:\ndiamonds[, \"depth\"]\ndiamonds[, 5] \ndiamonds$depth\nThe $ notation has the format data$variable and so can be thought of as specifying which data set the variable is in. It is easy to imagine a situation where two different data sets have the same name.\nThis allows us to perform calculations on an individual variable. Below is an example of finding the average price for all diamonds in the data set.\n\nmean(diamonds$price)\n\n[1] 3932.8\n\n\nYou can also subset a variable based on the value of a secondary variable. Here is an example of finding the average price for Good quality diamonds.\n\nmean(diamonds$price[diamonds$cut==\"Good\"])\n\n[1] 3928.864\n\n\nNote that the $ is used in both locations where we want to identify a variable.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Getting Started with R</span>"
    ]
  },
  {
    "objectID": "dm.html",
    "href": "dm.html",
    "title": "5  Working with Data",
    "section": "",
    "text": "5.0.1 Learning Objectives\nAfter completing this lesson learners will be able to",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#missing-data-video",
    "href": "dm.html#missing-data-video",
    "title": "5  Working with Data",
    "section": "5.1 Missing Data (Video)",
    "text": "5.1 Missing Data (Video)\nMissing data occurs when the value for a variable is missing. Think of it as a blank cell in an spreadsheet. Missing values can cause some problems during analysis, so let’s see how to detect missing values and how to work around them.\nConsider the ncbirths data set, specifically the first column containing data on the father’s age (fage).\n\nhead(ncbirths)\n\n# A tibble: 6 × 13\n   fage  mage mature    weeks premie visits marital gained weight lowbirthweight\n  &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;int&gt; &lt;fct&gt;   &lt;int&gt; &lt;fct&gt;    &lt;int&gt;  &lt;dbl&gt; &lt;fct&gt;         \n1    NA    13 younger …    39 full …     10 not ma…     38   7.63 not low       \n2    NA    14 younger …    42 full …     15 not ma…     20   7.88 not low       \n3    19    15 younger …    37 full …     11 not ma…     38   6.63 not low       \n4    21    15 younger …    41 full …      6 not ma…     34   8    not low       \n5    NA    15 younger …    39 full …      9 not ma…     27   6.38 not low       \n6    NA    15 younger …    38 full …     19 not ma…     22   5.38 low           \n# ℹ 3 more variables: gender &lt;fct&gt;, habit &lt;fct&gt;, whitemom &lt;fct&gt;\n\n\n\nR puts a NA as a placeholder when the value for that piece of data is missing.\nMissing data can be a result of many things: skip patterns in a survey (i.e. non-smokers don’t get asked how many packs per week they smoke), errors in data reads from a machine, etc.\n\nProblem 1 R can’t do arithmetic on missing data. So 5 + NA = NA, and if you were to try to calculate the mean() of a variable, you’d also get NA.\n\nmean(ncbirths$fage)\n\n[1] NA\n\n\nProblem 2 Some plots will show NA as it’s own category, which is undesirable.\n\nggplot(ncbirths, aes(premie))+geom_bar()\n\n\n\n\n\n\n\n\n\n5.1.1 Identifying missing values\nTo find out how many values in a particular variable are missing we can use one of two approaches:\n\nLook at the raw data using head() or str(). This may not be helpful if there is no missing values in the first 6 rows, or if there is a large number of variables to look through.\nLook at data summaries using table() for categorical data and summary() for numerical data. In the examples below you can see that entries for “NA” are included in the output.\n\n\ntable(ncbirths$habit, useNA=\"always\")\n\n\nnonsmoker    smoker      &lt;NA&gt; \n      873       126         1 \n\nsummary(ncbirths$fage)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  14.00   25.00   30.00   30.26   35.00   55.00     171 \n\n\n\n\n5.1.2 Is it NA?\nThe function is.na() returns TRUE or FALSE for each element in the provided vector for whether or not that element is missing.\n\nx &lt;- c(\"green\", NA, 3)\nis.na(x)\n\n[1] FALSE  TRUE FALSE\n\n\nIn this example, the vector x is created with three elements, the second one is missing. Calling the function is.na() on the vector x, results in three values, where only the second one is TRUE – meaning the second element is missing.\nThis can be extended to do things such as using the sum() function to count the number of missing values in a variable. Here we are nesting the functions is.na() is written entirely inside the sum() function.\n\nsum(is.na(ncbirths$fage))\n\n[1] 171\n\n\nThere are 171 records in this data set where the age for the father is not present.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#summarizing-data-video",
    "href": "dm.html#summarizing-data-video",
    "title": "5  Working with Data",
    "section": "5.2 Summarizing data (Video)",
    "text": "5.2 Summarizing data (Video)\nTwo common methods used to summarize data are table() for categorical factor variables, and summary() for numeric variables.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#frequency-tables-for-categorical-data",
    "href": "dm.html#frequency-tables-for-categorical-data",
    "title": "5  Working with Data",
    "section": "5.3 Frequency Tables for categorical data",
    "text": "5.3 Frequency Tables for categorical data\nFrequency tables are used only on categorical data, and the table results show you how many records in the data set have that particular factor level.\nYou can create a frequency table by using the table() function. The useNA=\"always\" argument tells R to always include an entry for missing values &lt;NA&gt;, even if there are none.\n\ntable(ncbirths$lowbirthweight, useNA=\"always\")\n\n\n    low not low    &lt;NA&gt; \n    111     889       0 \n\n\nThe variable ncbirths$lowbirthweight has 111 records with a value of low, and 889 records with the value of not low.\n\n5.3.1 Summary statistics for numerical data\nNumerical variables can be summarized using statistics such as the min, max, mean and median. The function summary() prints out the five number summary, and includes the mean. This function also displays the number of missing values for that variable.\n\nsummary(ncbirths$visits)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n    0.0    10.0    12.0    12.1    15.0    30.0       9 \n\n\nMothers included in this data set visited the doctor on average 12.1 times during their pregnancy.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#data-editing-recoding-video",
    "href": "dm.html#data-editing-recoding-video",
    "title": "5  Working with Data",
    "section": "5.4 Data editing / Recoding (Video)",
    "text": "5.4 Data editing / Recoding (Video)\nSometimes we have a need to edit, or change data. We can change values of existing data by using logical statements.\nTo choose all observations (rows) of a data set, where a variable is equal to some value, you would type\n\ndata[data$variable==value]  # example code\n\nWe can use this method of selecting rows, to change data in those specific rows.\nExample 1: Too low birthweight\nLet’s look at the numerical distribution of birthweight of the baby.\n\nsummary(ncbirths$weight)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   6.380   7.310   7.101   8.060  11.750 \n\n\nThe value of 1 lb seems very low. The researchers you are working with decide that is a mistake and should be excluded from the data. We would then set all records where weight=1 to missing.\n\nncbirths$weight[ncbirths$weight==1] &lt;- NA\n\n\nThe specific variable ncbirths$weight is on the left side outside the []. So just the variable weight is being changed. * Recall that bracket notation [] can be used to select rows where a certain logical statement is true. So [ncbirths$weight==1] will only show records where weight is equal to 1.\nNotice where the assignment arrow (&lt;-) is at. This code assigns the value of NA (missing) to the variable weight, where weight==1.\n\nBut what about other weights that aren’t quite as low as 1, but still unusually low? The boxplot below shows outlying values as dots on the low end of birthweight.\n\nboxplot(ncbirths$weight)\n\n\n\n\n\n\n\n\nLet’s set all birth weights less than 4 lbs to missing.\n\nncbirths$weight[ncbirths$weight &lt; 4] &lt;- NA\n\nIt is important to plot the data again, to make sure that there are no values below 4 now.\n\nboxplot(ncbirths$weight)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#creating-new-variables-video",
    "href": "dm.html#creating-new-variables-video",
    "title": "5  Working with Data",
    "section": "5.5 Creating new variables (Video)",
    "text": "5.5 Creating new variables (Video)\nNew variables should be added to the data frame. This can be done using $ sign notation.\nThe new variable you want to create goes on the left side of the assignment operator &lt;-, and how you want to create that new variable goes on the right side.\n\ndata$new_variable &lt;- creation statement\n\n\n5.5.1 Example: Row-wise difference between two existing variables\nAs a pregnancy progresses, both the mother and the baby gain weight. The variable gained is the total amount of weight the mother gained in her pregnancy. The variable weight is how much the baby weighed at birth.\n\nThe following code creates a new variable wtgain_mom the weight gained by the mother, that is not due to the baby by subtracting weight from gained.\n\nncbirths$wtgain_mom &lt;- ncbirths$gained - ncbirths$weight\n\nTo confirm this variable was created correctly, we look at the data contained in three variables in question.\n\nhead(ncbirths[,c('gained', 'weight', 'wtgain_mom')])\n\n# A tibble: 6 × 3\n  gained weight wtgain_mom\n   &lt;int&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1     38   7.63       30.4\n2     20   7.88       12.1\n3     38   6.63       31.4\n4     34   8          26  \n5     27   6.38       20.6\n6     22   5.38       16.6\n\n\n\n5.5.2 Dichtomizing data\nThe ifelse() is hands down the easiest way to create a binary variable (dichotomizing, only 2 levels)\nLet’s add a variable to identify if a mother in the North Carolina births data set was underage at the time of birth.\n\nWe will define this as if the mothers age mage is under 18.\nWe will create a new factor variable with two values: underage and adult.\nWe will use the ifelse() function.\n\nIt’s set of arguments are: ifelse(logical, value if TRUE, value if FALSE)\nThe logical argument is a statement that resolves as a boolean variable, as either TRUE or FALSE.\nThe second argument is what you want the resulting variable to contain if the logical argument is TRUE\nThe last argument is what you want the resulting variable to contain if the logical argument is FALSE\n\n\nMake a new variable underage on the ncbirths data set. If mage is under 18, then the value of this new variable is underage, else it is labeled as adult.\n\nncbirths$underage &lt;- ifelse(ncbirths$mage &lt; 18, \"underage\", \"adult\")\n\nYou should always make sure your code works as intended.\n\nFirst let’s look at the frequency table of underage and see if records exist with the new categories, and if there are any missing values.\n\n\ntable(ncbirths$underage, useNA=\"always\")\n\n\n   adult underage     &lt;NA&gt; \n     963       37        0 \n\n\n\nNext let’s check it against the value of mage itself. Let’s look at all rows where mothers age is either 17 or 18 mage %in% c(17,18), and only the columns of interest.\n\n\nncbirths[ncbirths$mage %in% c(17,18),c('mage', 'underage')]\n\n# A tibble: 57 × 2\n    mage underage\n   &lt;int&gt; &lt;chr&gt;   \n 1    17 underage\n 2    17 underage\n 3    17 underage\n 4    17 underage\n 5    17 underage\n 6    17 underage\n 7    17 underage\n 8    17 underage\n 9    17 underage\n10    17 underage\n# ℹ 47 more rows\n\n\nNotice I snuck a new operator in on you - %in%. This is a way you can provide a list of values (a.k.a a vector) and say “if the value of the variable I want is %in% any of these options in this vector…” do the thing.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "dm.html#chaining-using-the-pipe-video",
    "href": "dm.html#chaining-using-the-pipe-video",
    "title": "5  Working with Data",
    "section": "5.6 Chaining using the pipe (Video)",
    "text": "5.6 Chaining using the pipe (Video)\n\nThe pipe is technically part of the magrittr package, but quite often we will use it in conjunction with functions from the dplyr package introduced in a later lesson. In fact it’s so commonly used with dplyr functions that it the magrittr package is loaded when you load dplyr (which is what we do here). However, the pipe operator is so useful in many other places that it deserves it’s own introduction here.\n\n“and then….”\n\nThis is what I read to myself when using the pipe (%&gt;%). The pipe lets you chain functions together, as long as the first argument of the function is a data.frame or a variable in a data.frame.\n\n5.6.1 Example: Frequency tables & summary statistics\nEarlier we saw that to create a frequency table for categorical variable we can type:\n\ntable(ncbirths$mature)\n\n\n mature mom younger mom \n        133         867 \n\n\nThis is also accomplished by first stating the variable, then piping in the summary function.\n\nIf you get an error message saying something like function not found, that is a message to you that you need to load the library. See the preparation section of these notes to remind yourself how to do this.\n\n\nncbirths$mature %&gt;% table()\n\n.\n mature mom younger mom \n        133         867 \n\nncbirths$mage %&gt;% mean()\n\n[1] 27\n\n\nI read this as “Take the mage variable on the ncbirths data set, and then calculate the mean.”\nThe pipe %&gt;% allows multiple steps to be chained together to execute a series of commands all at once. The usefulness of this approach will be apparent before the class is finished.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Working with Data</span>"
    ]
  },
  {
    "objectID": "factors.html",
    "href": "factors.html",
    "title": "6  Working with Factors",
    "section": "",
    "text": "6.0.1 Student Learning Objectives\nAfter completing this lesson students will be able to",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#preparation",
    "href": "factors.html#preparation",
    "title": "6  Working with Factors",
    "section": "6.1 Preparation",
    "text": "6.1 Preparation\nPrior to this lesson learners should\n\nDownload the [factors_notes.qmd] Quarto file and save into your notes/Math130 folder.\n\nOpen this in RStudio and ensure the first code chunk will run without error.\n\nInstall the forcats package (this was done as part of lesson 02).\n\nWe’re going to use two data sets from the openintro package. The email data set contains information on emails received by a specific account for the first three months in 2012, and the fastfood data set describes nutrition amounts in 515 fast food items. More information can be seen about these data sets by viewing the help files using ?email and ?fastfood.\n\nlibrary(forcats)\nemail &lt;- openintro::email\nff    &lt;- openintro::fastfood\n\n\n\n The goal of the forcats package is to provide a suite of useful tools that solve common problems with factors. Often in R there are multiple ways to accomplish the same task. Some examples in this lesson will show how to perform a certain task using base R functions, as well as functions from the forcats package.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#what-is-a-factor-video",
    "href": "factors.html#what-is-a-factor-video",
    "title": "6  Working with Factors",
    "section": "6.2 What is a factor? (Video)",
    "text": "6.2 What is a factor? (Video)\nThe term factor refers to a data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable corresponds to a limited number of categories, while a continuous variable can correspond to an infinite number of values.\nAn example of a categorical variable is the number variable in the email data set. This variable contains data on whether there was no number, a small number (under 1 million), or a big number in the content of the email.\nFirst we should confirm that R sees number as a factor.\n\nclass(email$number)\n\n[1] \"factor\"\n\n\nWe can use the levels() function to get to know factor variables.\n\nlevels(email$number)\n\n[1] \"none\"  \"small\" \"big\"  \n\n\nThere are three levels: none, small, and big.\nHow many records are in each level? There are a few ways we can determine this, here are two:\nBase R\n\ntable(email$number)\n\n\n none small   big \n  549  2827   545 \n\n\nforcats\n\nfct_count(email$number)\n\n# A tibble: 3 × 2\n  f         n\n  &lt;fct&gt; &lt;int&gt;\n1 none    549\n2 small  2827\n3 big     545\n\n\nNote that fct_count also gives you the number of records with that factor level. This is yet another way to generate a frequency table.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#convert-a-number-to-factor-video",
    "href": "factors.html#convert-a-number-to-factor-video",
    "title": "6  Working with Factors",
    "section": "6.3 Convert a number to Factor (Video)",
    "text": "6.3 Convert a number to Factor (Video)\nSometimes data are entered into the computer using numeric codes such as 0 and 1. These codes stand for categories, such as “no” and “yes”. Sometimes we want to analyze these binary variables in two ways:\n\nFor statistical analyses, the data must be numeric 0/1.\nFor many graphics, the data must be a factor, “no/yes”.\n\nExample: Is the email flagged as spam? The spam variable is recorded as an integer variable with values 0 and 1.\n\ntable(email$spam)\n\n\n   0    1 \n3554  367 \n\nclass(email$spam)\n\n[1] \"factor\"\n\n\nWe use the function factor() to convert the numeric variable spam to a factor, applying labels to convert 0 to “no” and 1 to “yes”.\n\nemail$spam_fac &lt;- factor(email$spam, labels=c(\"no\", \"yes\"))\n\nThe ordering of the labels argument must be in the same order (left to right) as the factor levels themselves. Look back at the order of columns in the table - it goes 0 then 1. Thus our labels need to go “no” then “yes”.\nAlways confirm your recode\nHere we confirm that the new variable was created correctly by creating a two-way contingency table by calling the table(old variable, new variable) function on both the old and new variables.\n\ntable(email$spam, email$spam_fac, useNA=\"always\")\n\n      \n         no  yes &lt;NA&gt;\n  0    3554    0    0\n  1       0  367    0\n  &lt;NA&gt;    0    0    0\n\n\nHere we see that all the 0’s were recoded to ’no’s, and all the 1’s recoded to “yes”’s, and there are no new missing values. Success!",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#factor-ordering-video",
    "href": "factors.html#factor-ordering-video",
    "title": "6  Working with Factors",
    "section": "6.4 Factor ordering (Video)",
    "text": "6.4 Factor ordering (Video)\nLet’s revisit the variable number, that contains the size of the number in the email.\n\ntable(email$number)\n\n\n none small   big \n  549  2827   545 \n\n\nSpecifically the ordering from left to right of the factors. This is ordinal data, in that none is inherently “smaller” than small, which is smaller than big. Though R correctly ordered these data, it may default to alphabetical order in other cases, so beware! You may need to correct the ordering for other data sets.\nLet’s see a few ways of how to control the ordering.\n\n6.4.1 Manually specified\nWe need to take control of these factors! We can do that by re-factoring the existing factor variable, but this time specifying the levels of the factor (since it already has labels). Say we decide to reverse the order so we go from big to small to none, in decreasing order of size.\nBase R\n\nfactor(email$number, levels=c(\"big\", \"small\", \"none\")) %&gt;% table()\n\n.\n  big small  none \n  545  2827   549 \n\n\nforcats\n\nemail$number %&gt;% fct_relevel(\"big\", \"small\", \"none\") %&gt;% table()\n\n.\n  big small  none \n  545  2827   549 \n\n\nIn each of these examples, I pipe (%&gt;%) the table() function at the end so I can see the results of the reordering. This helps me visually confirm that the code used changed the factor levels to be left to right in decreasing content size order. This will be important for graphing.\n\nSince I did not use the assignment operator (&lt;-) here, these changes were not made to the variable in the email data set. The examples below demonstrate making an adjustmet to a factor variable and saving that adjustment as a new variable in the data set.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#factor-renaming-video",
    "href": "factors.html#factor-renaming-video",
    "title": "6  Working with Factors",
    "section": "6.5 Factor (re)naming (Video)",
    "text": "6.5 Factor (re)naming (Video)\nSometimes factors come to us in names we don’t prefer. We want them to say something else.\nBase R The easiest way here is to re-factor the variable and apply new labels.\n\nemail$my_new_number &lt;- factor(email$number, labels=c( \"None\", \"&lt;1M\",\"1M+\"))\n\nOk, but did this work? Trust, but verify.\n\ntable(email$number, email$my_new_number, useNA=\"always\")\n\n       \n        None  &lt;1M  1M+ &lt;NA&gt;\n  none   549    0    0    0\n  small    0 2827    0    0\n  big      0    0  545    0\n  &lt;NA&gt;     0    0    0    0\n\n\nThe “big” factor is now labeled “1M+”, “none” is named “None”, and “small” is “&lt;1M”.\nforcats: use the fct_recode(\"NEW\" = \"old\") function here.\n\nemail$my_forcats_number &lt;- fct_recode(email$number, \"BIG\" = \"big\", \"NONE\" = \"none\", \"SMALL\" = \"small\")\ntable(email$number, email$my_forcats_number, useNA=\"always\")\n\n       \n        NONE SMALL  BIG &lt;NA&gt;\n  none   549     0    0    0\n  small    0  2827    0    0\n  big      0     0  545    0\n  &lt;NA&gt;     0     0    0    0",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#collapsing-factor-levels-video",
    "href": "factors.html#collapsing-factor-levels-video",
    "title": "6  Working with Factors",
    "section": "6.6 Collapsing factor levels (Video)",
    "text": "6.6 Collapsing factor levels (Video)\nFor analysis purposes, sometimes you want to work with a smaller number of factor variables. Let’s look at the restaurants that are included in the fastfood data set.\n\ntable(ff$restaurant)\n\n\n      Arbys Burger King Chick Fil-A Dairy Queen   Mcdonalds       Sonic \n         55          70          27          42          57          53 \n     Subway   Taco Bell \n         96         115 \n\n\nLet’s combine all the sandwich, and burger joints together. I am going to save this new variable as restaurant_new.\nThe syntax for the fct_collapse function is new level = \"old level\", where the “old level” is in quotes. As always, it is good practice to create a two way table to make sure the code typed does what we expected it to do.\n\nff$restaurant_new &lt;- fct_collapse(ff$restaurant, \n                                    BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                                    Sammich = c(\"Arbys\", \"Subway\"))\n\ntable(ff$restaurant, ff$restaurant_new, useNA=\"always\")\n\n             \n              Sammich BurgerJoint Chick Fil-A Dairy Queen Taco Bell &lt;NA&gt;\n  Arbys            55           0           0           0         0    0\n  Burger King       0          70           0           0         0    0\n  Chick Fil-A       0           0          27           0         0    0\n  Dairy Queen       0           0           0          42         0    0\n  Mcdonalds         0          57           0           0         0    0\n  Sonic             0          53           0           0         0    0\n  Subway           96           0           0           0         0    0\n  Taco Bell         0           0           0           0       115    0\n  &lt;NA&gt;              0           0           0           0         0    0\n\n\nLet’s take this one step further and shorten the factor names and rename the levels with spaces (like Taco Bell).\n\nff$restaurant_shortname &lt;- fct_recode(ff$restaurant_new, \n                                      \"Ckn\" = \"Chick Fil-A\", \n                                      \"DQ\" = \"Dairy Queen\", \n                                      \"TB\" = \"Taco Bell\", \n                                      \"Samm\" = 'Sammich', \n                                      \"Burg\"= \"BurgerJoint\")\n\ntable(ff$restaurant, ff$restaurant_shortname, useNA=\"always\")\n\n             \n              Samm Burg Ckn  DQ  TB &lt;NA&gt;\n  Arbys         55    0   0   0   0    0\n  Burger King    0   70   0   0   0    0\n  Chick Fil-A    0    0  27   0   0    0\n  Dairy Queen    0    0   0  42   0    0\n  Mcdonalds      0   57   0   0   0    0\n  Sonic          0   53   0   0   0    0\n  Subway        96    0   0   0   0    0\n  Taco Bell      0    0   0   0 115    0\n  &lt;NA&gt;           0    0   0   0   0    0\n\n\n\n6.6.1 Let’s chain this all together.\nSporadically throughout this lesson, and at the end of the last lesson I’ve used the pipe %&gt;% operator as somewhat of a shortcut. This amazing piece of code lets us string together commands. Let’s see how to accomplish both changes to the restaurant variable in one single step.\n\n\nff$restaurant %&gt;% fct_collapse(BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                               Sammich     = c(\"Arbys\", \"Subway\")) %&gt;%\n                  fct_recode(\"Ckn\"  = \"Chick Fil-A\", \n                             \"DQ\"   = \"Dairy Queen\", \n                             \"TB\"   = \"Taco Bell\", \n                             \"Samm\" = 'Sammich', \n                             \"Burg \"= \"BurgerJoint\") %&gt;%\n                  table()\n\n.\n Samm Burg    Ckn    DQ    TB \n  151   180    27    42   115 \n\n\nA few things to note when chaining commands together:\n\nthe first argument (the data or variable) is not included.\nthe pipe itself must be at the end of a “sentence”\n\nDon’t worry if this doesn’t make immediate sense right now. We’ll talk more on chaining commands together in a later lesson. There is no harm in accomplishing a task in more than one step.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "factors.html#removing-factor-levels-video",
    "href": "factors.html#removing-factor-levels-video",
    "title": "6  Working with Factors",
    "section": "6.7 Removing factor levels (Video)",
    "text": "6.7 Removing factor levels (Video)\nSometimes, you don’t even want to consider certain levels. This often occurs in survey data where the respondent provides an answer of “Refuse to answer” or the data is coded as the word “missing”. The word “missing’ is fundamentally different than the NA code for a missing value.\nFor demonstration purposes, let’s get rid of the data from DQ. Who eats something other than ice cream at that place anyhow?\nThe most straight forward way to set a variable missing based on it’s value is to use a logical statement to choose what rows the variable is set to missing.\n\nff$restaurant_shortname[ff$restaurant_shortname == \"DQ\"] &lt;- NA\ntable(ff$restaurant_shortname, useNA=\"always\")\n\n\nSamm Burg  Ckn   DQ   TB &lt;NA&gt; \n 151  180   27    0  115   42 \n\n\nThis table shows that there are 42 records missing restaraunt_shortname, and 0 records with the level DQ. Unfortunately, the level itself still is there. R does not assume just because there are no records with that level, that the named level itself should be removed. We can use the function fct_drop to drop the levels with no records.\n\nfct_drop(ff$restaurant_shortname) %&gt;% table()\n\n.\nSamm Burg  Ckn   TB \n 151  180   27  115 \n\n\nIf we knew ahead of time we wanted to drop DQ, we could have set that level to NULL when we did the initial recode.\n\nff$restaurant %&gt;% fct_collapse(BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                               Sammich = c(\"Arbys\", \"Subway\")) %&gt;%\n                  fct_recode(\"Ckn\"  = \"Chick Fil-A\", \n                              NULL   = \"Dairy Queen\", \n                             \"TB\"   = \"Taco Bell\", \n                             \"Samm\" = 'Sammich', \n                             \"Burg \"= \"BurgerJoint\") %&gt;%\n                  table()\n\n.\n Samm Burg    Ckn    TB \n  151   180    27   115",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Factors</span>"
    ]
  },
  {
    "objectID": "plots.html",
    "href": "plots.html",
    "title": "7  Creating Graphics",
    "section": "",
    "text": "7.0.1 Learning Objectives\nAfter completing this lesson students will be able to create basic data visualizations using both base R and the ggplot2 package.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating Graphics</span>"
    ]
  },
  {
    "objectID": "plots.html#the-syntax-of-ggplot",
    "href": "plots.html#the-syntax-of-ggplot",
    "title": "7  Creating Graphics",
    "section": "7.1 The syntax of ggplot",
    "text": "7.1 The syntax of ggplot\nThe reason we use the functions in ggplot2 is for consistency in the structure of it’s arguments. Here is a bare bones generic plotting function:\nggplot(data, aes(x=x, y=y, col=col, fill=fill, group=group)) +  geom_THING() \n\n7.1.1 Required arguments\n\ndata: What data set is this plot using? This is ALWAYS the first argument.\naes(): This is the aesthetics of the plot. What variable is on the x, and what is on the y? Do you want to color by another variable, perhaps fill some box by the value of another variable, or group by a variable.\ngeom_THING(): Every plot has to have a geometry. What is the shape of the thing you want to plot? Do you want to plot point? Use geom_points(). Want to connect those points with a line? Use geom_lines(). We will see many varieties in this lab.\n\n\n\n7.1.2 The Diamonds Data\nWe will use a subset of the diamonds dataset that comes with the ggplot2 package. This dataset contains the prices and other attributes of almost 54,000 diamonds. Review ?diamonds to learn about the variables we will be using.\n\nlibrary(ggplot2)\ndiamonds &lt;- ggplot2::diamonds\nset.seed(1410) # Make the sample reproducible\ndsmall &lt;- diamonds[sample(nrow(diamonds), 1000), ]",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating Graphics</span>"
    ]
  },
  {
    "objectID": "plots.html#univariate-one-variable-video",
    "href": "plots.html#univariate-one-variable-video",
    "title": "7  Creating Graphics",
    "section": "7.2 Univariate (One Variable) (Video)",
    "text": "7.2 Univariate (One Variable) (Video)\n\n7.2.1 Categorical variables\nBoth Nominal and Ordinal data types can be visualized using the same methods: tables, barcharts and pie charts.\n\n7.2.1.1 Tables\nTables are the most common way to get summary statistics of a categorical variable. The table() function produces a frequency table, where each entry represents the number of records in the data set holding the corresponding labeled value.\n\ntable(dsmall$cut)\n\n\n     Fair      Good Very Good   Premium     Ideal \n       34        99       220       257       390 \n\n\nThere are 34 Fair quality diamonds, 99 Good quality diamonds, and 390 Ideal quality diamonds in this sample.\n\n\n7.2.1.2 Barcharts / Barplots\nA Barchart or barplot takes these frequencies, and draws bars along the X-axis where the height of the bars is determined by the frequencies seen in the table.\nThe geometry needed to draw a barchart in ggplot is geom_bar().\n\nggplot(dsmall, aes(x=cut)) + geom_bar()\n\n\n\n\n\n\n\n\nWe can reorder these levels on the fly so they are being shown in decreasing frequency using the fct_infreq function from the forcats library.\n\nggplot(dsmall, aes(x=forcats::fct_infreq(cut))) + geom_bar() + xlab(\"cut\")\n\n\n\n\n\n\n\n\n\nSpecial note. The :: notation is a shortcut to use a function from inside a package without actually loading the entire package. This can be useful when you’re only using a function once or twice in an analysis.\n\n\n\n\n7.2.2 Continuous variable\nThe price, carat, and depth of the diamonds are all continuous variables. Let’s explore the distribution of price.\n\n7.2.2.1 Histograms\nRather than showing the value of each observation, we prefer to think of the value as belonging to a bin. The height of the bars in a histogram display the frequency of values that fall into those of those bins.\nSince the x-axis is continuous the bars touch. This is unlike the barchart that has a categorical x-axis, and vertical bars that are separated.\n\nggplot(dsmall, aes(x=price)) + geom_histogram()\n\n\n\n\n\n\n\n\n\n\n7.2.2.2 Density plots\nTo get a better idea of the true shape of the distribution we can “smooth” out the bins and create what’s called a density plot or curve. Notice that the shape of this distribution curve is much… “wigglier” than the histogram may have implied.\n\nggplot(dsmall, aes(x=price)) + geom_density()\n\n\n\n\n\n\n\n\n\n\n7.2.2.3 Histograms + density\nOften it is more helpful to have the density (or kernel density) plot on top of a histogram plot.\n\nThe syntax starts the same: we’ll add a new geom, geom_density and color the line blue.\nThen we add the histogram geom using geom_histogram but must specify that the y axis should be on the density, not frequency, scale.\n\nNote that this has to go inside the aesthetic statement aes().\n\nI’m also going to get rid of the fill by using NA so the colored bars don’t plot over the density line.\n\n\nggplot(dsmall, aes(x=price)) + geom_density(col=\"blue\") + \n  geom_histogram(aes(y=..density..), colour=\"black\", fill=NA)\n\n\n\n\n\n\n\n\n\n\n7.2.2.4 Boxplots\nAnother very common way to visualize the distribution of a continuous variable is using a boxplot. Boxplots are useful for quickly identifying where the bulk of your data lie. R specifically draws a “modified” boxplot where values that are considered outliers are plotted as dots.\n\n7.2.2.4.1 base\n\nboxplot(dsmall$price)\n\n\n\n\n\n\n\n\nNotice that the only axis labeled is the y=axis. Like a dotplot the x axis, or “width”, of the boxplot is meaningless here. We can make the axis more readable by flipping the plot on its side.\n\nboxplot(dsmall$price, horizontal = TRUE, main=\"Distribution of diamond prices\", xlab=\"Dollars\")\n\n\n\n\n\n\n\n\nHorizontal is a bit easier to read in my opinion.\nWhat about ggplot? ggplot doesn’t really like to do univariate boxplots. You’ll see those later when we create one boxplot per group.\n\n\n\n7.2.2.5 New variable\nBefore we move on, I want to see price displayed as ranges of 5,000 instead of a continuous measure from 0 to 20,000. I will us the cut_width function to create a new categorical variable here called price_range. See this page for this, and other functions in ggplot that discretize numeric data into categorical.\n\ndsmall$price_range &lt;- cut_width(dsmall$price/1000, width=5)\n\nNotice I also divided price by 1000, so 2.5 means 2500. Now that price_range is a categorical variable, I can create a barchart to visualize the frequencies of each bin.\n\nggplot(dsmall, aes(x=price_range)) + geom_bar()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating Graphics</span>"
    ]
  },
  {
    "objectID": "plots.html#bivariate-two-variables-video",
    "href": "plots.html#bivariate-two-variables-video",
    "title": "7  Creating Graphics",
    "section": "7.3 Bivariate (Two Variables) (Video)",
    "text": "7.3 Bivariate (Two Variables) (Video)\n\n7.3.1 Categorical v. Categorical\n\n7.3.1.1 Two-way Tables\nCross-tabs, cross-tabulations and two-way tables (all the same thing, different names) can be created by using the table() function.\n\n\n7.3.1.2 Frequency table\nThe frequency table is constructed using the table() function.\n\ntable(dsmall$cut, dsmall$price_range)\n\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair              15        13          4           1           1\n  Good              41        45          8           5           0\n  Very Good        108        78         22          12           0\n  Premium          111        86         35          20           5\n  Ideal            237       103         34          14           2\n\n\nThere are 4 Fair diamonds that cost between 7.5 and 12.5 thousand dollars, and 103 Ideal quality diamonds that cost between 2.5 and 7.5k.\n\n7.3.1.2.1 Cell proportions\nWrapping prop.table() around a table gives you the cell proportions.\n\ntable(dsmall$cut, dsmall$price_range) %&gt;% prop.table()\n\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.015     0.013      0.004       0.001       0.001\n  Good           0.041     0.045      0.008       0.005       0.000\n  Very Good      0.108     0.078      0.022       0.012       0.000\n  Premium        0.111     0.086      0.035       0.020       0.005\n  Ideal          0.237     0.103      0.034       0.014       0.002\n\n\n\n1.5% of all diamonds are Fair cut and cost under 2.5k.\n0.5% of all diamonds are Premium cut and cost over 17.5k\n\n\n\n7.3.1.2.2 Row proportions\nTo get the row proportions, specify margin=1. The percentages now add up to 1 across the rows.\n\ntable(dsmall$cut, dsmall$price_range) %&gt;% prop.table(margin=1) %&gt;% round(3)\n\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.441     0.382      0.118       0.029       0.029\n  Good           0.414     0.455      0.081       0.051       0.000\n  Very Good      0.491     0.355      0.100       0.055       0.000\n  Premium        0.432     0.335      0.136       0.078       0.019\n  Ideal          0.608     0.264      0.087       0.036       0.005\n\n\n\n44.1% of Fair quality diamonds cost under 2.5k\n1.9% of Premium quality diamonds cost over 17.5k.\n\n\n\n7.3.1.2.3 Column proportions\nTo get the column proportions, you specify margin=2. The percentages now add up to 1 down the columns.\n\ntable(dsmall$cut, dsmall$price_range) %&gt;% prop.table(margin=2) %&gt;% round(3)\n\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.029     0.040      0.039       0.019       0.125\n  Good           0.080     0.138      0.078       0.096       0.000\n  Very Good      0.211     0.240      0.214       0.231       0.000\n  Premium        0.217     0.265      0.340       0.385       0.625\n  Ideal          0.463     0.317      0.330       0.269       0.250\n\n\n\n8% of diamonds that cost under 2.5k are of Good quality\n25% of diamonds that cost over 17.5k are Ideal quality\n\n\n\n\n7.3.1.3 Grouped bar charts\nTo compare proportions of one categorical variable within the same level of another, is to use grouped barcharts.\nPlot the cut on the x axis, but then fill using the second categorical variable. This has the effect of visualizing the row percents from the table above. Here it is the percent of price_range, within each type of cut.\n\nggplot(dsmall, aes(x=cut, fill=price_range)) + geom_bar()\n\n\n\n\n\n\n\n\nThe default is a stacked barchart. So add the argument position=dodge inside the geom_bar layer to put the bars side by side.\n\nggplot(dsmall, aes(x=cut, fill=price_range)) + geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\nAnd look, an automatic legend. What if I wanted to better compare cut within price range? This is the column percentages. Just switch which variable is the x axis and which one is used to fill the colors!\n\nggplot(dsmall, aes(x=price_range, fill=cut)) + geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\nAnd this easy change is why we love ggplot2.\n\n\n\n7.3.2 Continuous v. Continuous\n\n7.3.2.1 Scatterplot\nThe most common method of visualizing the relationship between two continuous variables is by using a scatterplot.\nWith ggplot we specify both the x and y variables, and add a point.\n\nggplot(dsmall, aes(x=carat, y=price)) + geom_point()\n\n\n\n\n\n\n\n\n\n7.3.2.1.1 Adding lines to the scatterplots\nTwo most common trend lines added to a scatterplots are the “best fit” straight line and the “lowess” smoother line. This is done by adding a geom_smooth() layer.\n\nggplot(dsmall, aes(x=carat, y=price)) + geom_point() + geom_smooth() \n\n\n\n\n\n\n\n\nHere the point-wise confidence interval for this lowess line is shown in grey. If you want to turn the confidence interval off, use se=FALSE. Also notice that the smoothing geom uses a different function or window than the lowess function used in base graphics.\nHere it is again using the ggplot plotting function and adding another geom_smooth() layer for the lm (linear model) line in blue, and the lowess line (by not specifying a method) in red.\n\nggplot(dsmall, aes(x=carat, y=price)) + geom_point() + \n  geom_smooth(se=FALSE, method=\"lm\", color=\"blue\") + \n  geom_smooth(se=FALSE, color=\"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n7.3.3 Continuous v. Categorical\nCreate an appropriate plot for a continuous variable, and plot it for each level of the categorical variable by shading the plots or coloring the lines depending on the group.\n\n7.3.3.1 Overlaid density plots\nYou could fill the density curves depending on the group, but then it’s hard to see overlap.\n\nggplot(dsmall, aes(x=depth, fill=cut)) + geom_density()\n\n\n\n\n\n\n\n\nWe can adjust the transparency of the density curve by applying a value to alpha inside the density layer. Alpha is a measure of transparency, from 0=clear to 1=opaque.\n\nggplot(dsmall, aes(x=depth, fill=cut)) + geom_density(alpha=.3)\n\n\n\n\n\n\n\n\nNow we can see that there are some premium cut diamonds with depths around 62. This peak was hidden from us before.\nYou could also just color the lines and leave the fill alone.\n\nggplot(dsmall, aes(x=depth, color=cut)) + geom_density()\n\n\n\n\n\n\n\n\nWe won’t talk about changing colors or the background in this lab, but the yellow is pretty hard to read.\n\n\n7.3.3.2 Grouped boxplots\nggplot is happy to do grouped boxplots. Put the continuous variable on the y, categorical on the x.\n\nggplot(dsmall, aes(x=price_range, y=carat)) + geom_boxplot()\n\n\n\n\n\n\n\n\n\n7.3.3.2.1 Adding violins to the boxplot\nA violin plot is like a density plot, turned on its side, and reflected around the axis for symmetry purposes. Overlaying a boxplot and a violin plot serves a similar purpose to Histograms + Density plots. It shows outliers, the location of most the data, and better shows the shape/skew of the distribution. Let’s also fill the geometries with the same color as what is on the x-axis. Not 100% needed but nice for display sometimes.\n\nggplot(dsmall, aes(x=price_range, y=carat, fill=price_range)) +\n        geom_violin(alpha=.1) + \n        geom_boxplot(alpha=.5, width=.2)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating Graphics</span>"
    ]
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Putting it all together",
    "section": "",
    "text": "Instructions\nUsing your data set of choice, pose a brief research question that explores the relationship between 2-3 variables.\nUse markdown headers to make the following sections\nAll descriptions (univariate and bivariate) must be done using graphics, summary statistics, and words.\nThis is a very vague set of instructions for a reason. I want you to explore and choose a pair of variables that you find interesting. Create tables, graphics, grouped summary statistics (mean of the continuous variable across levels of the categorical variable). Whatever you need to do to understand the relationship between these two measures.\nUse the grading rubric at the end of this document for guidance as to what you should present, in what order, and level of detail you need to present.",
    "crumbs": [
      "Putting it all together"
    ]
  },
  {
    "objectID": "project.html#instructions",
    "href": "project.html#instructions",
    "title": "Putting it all together",
    "section": "",
    "text": "Introduction: A short introduction/description of the data.\n\nSpecifically mention the 2-3 variables you are going to explore.\nWhat is your research question? What are you interested in finding out more about?\n\nUnivariate Exploration: Describe each of the variables under consideration.\n\nThis means calculate some summary statistics (N(%) or mean(sd)) and make a graphic\n\nBivariate Exploration: Comparison between two variables of interest.\n\nCalculate grouped summary statistics as appropriate. This is often the most often forgotten part\nYou can go further and explore more than two variables at a time using paneling, but be sure to explain what you learn from each graph.\n\nConclusion: What did you find? If you had a prior hypothesis, does the data seem to support it? Remember this is NOT a statistical analysis.",
    "crumbs": [
      "Putting it all together"
    ]
  },
  {
    "objectID": "project.html#data",
    "href": "project.html#data",
    "title": "Putting it all together",
    "section": "Data",
    "text": "Data\nYou have a choice here. If you are currently working on some data that you would like to explore, talk with your instructor to get your data set approved. As long as it has more than a few variables in it, and at least 30 observations it should be fine.\nIf you do not have your own data, you can choose from one of the following data sets, all of which can be downloaded from the Data page of Dr. D’s teaching course website. Here are some viable choices:\n\nEmail Spam: Characteristics of emails used to predict if the email is spam or not.\nHIV: Data on adolescent children living with HIV positive parents.\nDepression: Level of depression (cesd), health care, and demographic characteristics.\nHigh School and Beyond: Educational, vocational, and personal development of elementary and high school students.\nPolice Shootings: Characteristics of individuals killed by police in 2015.\n\nAny other data sets require instructor approval. Data sets such as the plants or arm strength data sets are insufficiently complex for this project. Also you can’t use the dsmall, diamonds, or NCbirths data sets because we’ve used them too much already.",
    "crumbs": [
      "Putting it all together"
    ]
  },
  {
    "objectID": "project.html#guidelines",
    "href": "project.html#guidelines",
    "title": "Putting it all together",
    "section": "Guidelines",
    "text": "Guidelines\n\nRender early and often. As often as every time you include a new R code chunk.\nSpell check your report prior to submission using RStudio.\nRe-read your report and edit for clarification and removing duplicated information.\nRemove superfluous code and output (i.e. printing a data set to the screen).\nThis is to be independent work. Papers that are too similar will receive no credit.\nLook at the grading rubric to help you decide the level of detail required.",
    "crumbs": [
      "Putting it all together"
    ]
  },
  {
    "objectID": "project.html#scoring-rubric",
    "href": "project.html#scoring-rubric",
    "title": "Putting it all together",
    "section": "Scoring Rubric",
    "text": "Scoring Rubric\n\nreview these with others. we’re not really teaching how to interpret.\n\nThe criteria below is what you will be graded on.\n\n\n\n\n\n\n\n\n\nCriteria\nNovice\nCompetent\nProficient\n\n\n\n\nData Description: Provide a description of the data set and the variables of interest.\nThere is no description or the description is a copy of the help file.\nThere is a minor description of the data but not enough to understand what is being measured or compared.\nThe data description is clear and concise, it is clear to me what data is being analyzed and where it was obtained.\n\n\nUnivariate Description: Fully describe the distribution of each variable by itself\nThere are no numerical or graphical summaries provided.\nOnly numeric or only graphical summaries were created, but no textual description.\nThe variable was fully described using both numeric and graphical summary methods. This information was summarized below the output in a paragraph form.\n\n\nBivariate Comparison: Describe the relationship between the two chosen variables.\nNo comparison was made, or the variables were compared, but inappropriate graphics or summary statistics were created.\nThe variables were compared using appropriate graphical methods and grouped summary statistics were created, but nothing was discussed.\nThe variables were compared using appropriate graphical methods and a short textual explanation of what the summaries showed.\n\n\nOrganization / Grammar: How well does the report read? How well organized is it? Was it checked for grammar and spelling mistakes?\nOnly R code, output is present. There is no discussion of results. Tons of extra R code that is not relevant to the discussion is present. Markdown headers were not used.\nAn attempt was made to discuss the results, but the explanations are not in a report format or there are some large grammar and/or spelling problems. Some R code that is not relevant to the analysis question at hand is being displayed. Markdown headers were used to create sections.\nThe report was spell written in well edited, full English sentences, and spell checked prior to submission. The report flowed well and followed the required order of discussion topics with markdown headers used successfully.",
    "crumbs": [
      "Putting it all together"
    ]
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Right click and save these files in your Math 130/hw folder. You will write your answers directly in them and submit your assignment as instructed by the due date.\n\nHW 1\nHW 2\nHW 3\nHW 4\n\n\nNeed help getting started?\nWatch Dr. Lytals help video",
    "crumbs": [
      "Assignments"
    ]
  }
]
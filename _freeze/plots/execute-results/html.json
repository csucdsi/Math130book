{
  "hash": "22c89771947b9c52ff9cfe729b19cff0",
  "result": {
    "engine": "knitr",
    "markdown": "# Creating Graphics\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\nVisualizing your data is hands down the most important thing you can learn to do. Seeing is critical to understanding. There are two audiences in mind when creating data visualizations: \n\n1. For your eyes only (FYEO). These are quick and dirty plots, without annotation. Meant to be looked at once or twice.\n2. To share with others. These need to completely stand on their own. Axes labels, titles, colors as needed, possibly captions.\n\nYou will see, and slowly learn, how to add these annotations and how to clean up your graphics to make them sharable. Functions inside the `ggplot2` package automatically does a lot of this work for you. Remember this package has to be loaded prior to being able to access the functions within. \n\n<a href=\"https://media.csuchico.edu/media/MATH+130+Lecture+07A+Introduction/1_jlh6zm14\" target=\"_blank\">(Introduction Video)</a>\n\n\n::: .callout-note\n### Learning Objectives\n\nAfter completing this lesson students will be able to create basic data visualizations using both base R and the `ggplot2` package.  \n\n:::\n\n\n##### Prior to this lesson learners should\n\n* Download the [[07_plots_notes.Rmd]](07_plots_notes.Rmd) R markdown file and save into your `Math130/notes` folder. \n\n## The syntax of `ggplot`\nThe reason we use the functions in `ggplot2` is for consistency in the structure of it's arguments. Here is a bare bones generic plotting function: \n\n```r\nggplot(data, aes(x=x, y=y, col=col, fill=fill, group=group)) +  geom_THING() \n```\n\n### Required arguments\n\n* `data`: What data set is this plot using? This is ALWAYS the first argument.\n* `aes()`: This is the _aesthetics_ of the plot. What variable is on the x, and what is on \n   the y? Do you want to color by another variable, perhaps fill some box by the value\n   of another variable, or group by a variable. \n* `geom_THING()`: Every plot has to have a geometry. What is the shape of the thing you \n   want to plot? Do you want to plot point? Use `geom_points()`. Want to connect those\n   points with a line? Use `geom_lines()`. We will see many varieties in this lab. \n\n\n### The Diamonds Data\n\nWe will use a subset of the `diamonds` dataset that comes with the `ggplot2` package. This dataset contains the prices and other attributes of almost 54,000 diamonds. Review `?diamonds` to learn about the variables we will be using. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndiamonds <- ggplot2::diamonds\nset.seed(1410) # Make the sample reproducible\ndsmall <- diamonds[sample(nrow(diamonds), 1000), ]\n```\n:::\n\n\n\n\n\n\n\n\n## Univariate (One Variable) <a href=\"https://media.csuchico.edu/media/MATH+130+Lecture+07A+Univariate+Plots/1_yxer79dh\" target=\"_blank\">(Video)</a>\n\n### Categorical variables\nBoth Nominal and Ordinal data types can be visualized using the same methods: tables, barcharts and pie charts. \n\n#### Tables\nTables are the most common way to get summary statistics of a categorical variable. The `table()` function produces a frequency table, where each entry represents the number of records in the data set holding the corresponding labeled value. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dsmall$cut)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     Fair      Good Very Good   Premium     Ideal \n       34        99       220       257       390 \n```\n\n\n:::\n:::\n\n\n\n\n\nThere are 34 Fair quality diamonds, 99 Good quality diamonds, and 390 Ideal quality diamonds in this sample. \n\n#### Barcharts / Barplots\nA Barchart or barplot takes these frequencies, and draws bars along the X-axis where the height of the bars is determined by the frequencies seen in the table. \n\nThe geometry needed to draw a barchart in ggplot is `geom_bar()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=cut)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWe can reorder these levels on the fly so they are being shown in decreasing frequency using the `fct_infreq` function from the `forcats` library. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=forcats::fct_infreq(cut))) + geom_bar() + xlab(\"cut\")\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n> Special note. The `::` notation is a shortcut to use a function from inside a package without actually loading the entire package. This can be useful when you're only using a function once or twice in an analysis. \n\n### Continuous variable\nThe price, carat, and depth of the diamonds are all continuous variables. Let's explore the distribution of `price`. \n\n#### Histograms\nRather than showing the value of each observation, we prefer to think of the value as belonging to a _bin_. The height of the bars in a histogram display the frequency of values that fall into those of those bins. \n\nSince the x-axis is continuous the bars touch. This is unlike the barchart that has a categorical x-axis, and vertical bars that are separated.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price)) + geom_histogram()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n#### Density plots\nTo get a better idea of the true shape of the distribution we can \"smooth\" out the bins and create what's called a `density` plot or curve. Notice that the shape of this distribution curve is much... \"wigglier\" than the histogram may have implied. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Histograms + density \nOften it is more helpful to have the density (or kernel density) plot _on top of_ a histogram plot. \n\n* The syntax starts the same: we'll add a new geom, `geom_density` and color the line blue. \n* Then we add the histogram geom using `geom_histogram` but must specify that the y axis should be on the density, not frequency, scale. \n    - Note that this has to go inside the aesthetic statement `aes()`. \n* I'm also going to get rid of the fill by using `NA` so the colored bars don't plot over the density line. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price)) + geom_density(col=\"blue\") + \n  geom_histogram(aes(y=..density..), colour=\"black\", fill=NA)\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Boxplots\nAnother very common way to visualize the distribution of a continuous variable is using a boxplot. Boxplots are useful for quickly identifying where the bulk of your data lie. R specifically draws a \"modified\" boxplot where values that are considered outliers are plotted as dots. \n\n##### base\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(dsmall$price)\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNotice that the only axis labeled is the y=axis. Like a dotplot the x axis, or \"width\", of the boxplot is meaningless here. We can make the axis more readable by flipping the plot on its side. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(dsmall$price, horizontal = TRUE, main=\"Distribution of diamond prices\", xlab=\"Dollars\")\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nHorizontal is a bit easier to read in my opinion. \n\nWhat about ggplot? ggplot doesn't really like to do univariate boxplots. You'll see those later when we create one boxplot per group. \n\n\n#### New variable\n\nBefore we move on, I want to see `price` displayed as ranges of 5,000 instead of a continuous measure from 0 to 20,000. I will us the `cut_width` function to create a new categorical variable here called `price_range`. [See this page for this, and other functions in ggplot that discretize numeric data into categorical ](https://ggplot2.tidyverse.org/reference/cut_interval.html). \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndsmall$price_range <- cut_width(dsmall$price/1000, width=5)\n```\n:::\n\n\n\n\n\n\nNotice I also divided price by 1000, so 2.5 means 2500. Now that `price_range` is a categorical variable, I can create a barchart to visualize the frequencies of each bin. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price_range)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## Bivariate (Two Variables) <a href=\"https://media.csuchico.edu/media/MATH+130+Lecture+07A+Bivariate+Plots/1_n9dyviwp\" target=\"_blank\">(Video)</a>\n\n### Categorical v. Categorical\n\n#### Two-way Tables\nCross-tabs, cross-tabulations and two-way tables (all the same thing, different names) can be created by using the `table()` function. \n\n#### Frequency table\nThe frequency table is constructed using the `table()` function. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dsmall$cut, dsmall$price_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair              15        13          4           1           1\n  Good              41        45          8           5           0\n  Very Good        108        78         22          12           0\n  Premium          111        86         35          20           5\n  Ideal            237       103         34          14           2\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are 4 Fair diamonds that cost between 7.5 and 12.5 thousand dollars, and 103 Ideal quality diamonds that cost between 2.5 and 7.5k. \n\n##### Cell proportions\nWrapping `prop.table()` around a table gives you the **cell** proportions. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dsmall$cut, dsmall$price_range) %>% prop.table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.015     0.013      0.004       0.001       0.001\n  Good           0.041     0.045      0.008       0.005       0.000\n  Very Good      0.108     0.078      0.022       0.012       0.000\n  Premium        0.111     0.086      0.035       0.020       0.005\n  Ideal          0.237     0.103      0.034       0.014       0.002\n```\n\n\n:::\n:::\n\n\n\n\n\n\n* 1.5% of all diamonds are Fair cut and cost under 2.5k.\n* 0.5% of all diamonds are Premium cut and cost over 17.5k\n\n##### Row proportions\nTo get the **row** proportions, specify `margin=1`. The percentages now add up to 1 across the rows. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dsmall$cut, dsmall$price_range) %>% prop.table(margin=1) %>% round(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.441     0.382      0.118       0.029       0.029\n  Good           0.414     0.455      0.081       0.051       0.000\n  Very Good      0.491     0.355      0.100       0.055       0.000\n  Premium        0.432     0.335      0.136       0.078       0.019\n  Ideal          0.608     0.264      0.087       0.036       0.005\n```\n\n\n:::\n:::\n\n\n\n\n\n\n* 44.1% of Fair quality diamonds cost under 2.5k\n* 1.9% of Premium quality diamonds cost over 17.5k.\n\n##### Column proportions\nTo get the **column** proportions, you specify `margin=2`. The percentages now add up to 1 down the columns. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(dsmall$cut, dsmall$price_range) %>% prop.table(margin=2) %>% round(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            [-2.5,2.5] (2.5,7.5] (7.5,12.5] (12.5,17.5] (17.5,22.5]\n  Fair           0.029     0.040      0.039       0.019       0.125\n  Good           0.080     0.138      0.078       0.096       0.000\n  Very Good      0.211     0.240      0.214       0.231       0.000\n  Premium        0.217     0.265      0.340       0.385       0.625\n  Ideal          0.463     0.317      0.330       0.269       0.250\n```\n\n\n:::\n:::\n\n\n\n\n\n\n* 8% of diamonds that cost under 2.5k are of Good quality\n* 25% of diamonds that cost over 17.5k are Ideal quality\n\n#### Grouped bar charts\nTo compare proportions of one categorical variable within the same level of another, is to use grouped barcharts. \n\nPlot the cut on the x axis, but then `fill` using the second categorical variable. This has the effect of visualizing the **row** percents from the table above. Here it is the percent of `price_range`, within each type of `cut`. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=cut, fill=price_range)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nThe default is a stacked barchart. So add the argument `position=dodge` inside the `geom_bar` layer to put the bars side by side. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=cut, fill=price_range)) + geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAnd look, an automatic legend. What if I wanted to better compare cut within price range? This is the **column** percentages. Just switch which variable is the x axis and which one is used to fill the colors!\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price_range, fill=cut)) + geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAnd this easy change is why we love `ggplot2`. \n\n### Continuous v. Continuous \n\n#### Scatterplot\nThe most common method of visualizing the relationship between two continuous variables is by using a scatterplot. \n\nWith ggplot we specify both the x and y variables, and add a point. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=carat, y=price)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n##### Adding lines to the scatterplots \nTwo most common trend lines added to a scatterplots are the \"best fit\" straight line and the \"lowess\" smoother line. This is done by adding a `geom_smooth()` layer. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=carat, y=price)) + geom_point() + geom_smooth() \n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nHere the point-wise confidence interval for this lowess line is shown in grey. If you want to turn the confidence interval off, use `se=FALSE`. Also notice that the smoothing geom uses a different function or window than the `lowess` function used in base graphics. \n\nHere it is again using the `ggplot` plotting function and adding another `geom_smooth()` layer for the `lm` (linear model) line in blue, and the lowess line (by not specifying a method) in red.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=carat, y=price)) + geom_point() + \n  geom_smooth(se=FALSE, method=\"lm\", color=\"blue\") + \n  geom_smooth(se=FALSE, color=\"red\")\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Continuous v. Categorical\nCreate an appropriate plot for a continuous variable, and plot it for each level of the categorical variable by shading the plots or coloring the lines depending on the group. \n\n#### Overlaid density plots\n\nYou could `fill` the density curves depending on the group, but then it's hard to see overlap. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=depth, fill=cut)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWe can adjust the transparency of the density curve by applying a value to `alpha` inside the density layer. Alpha is a measure of transparency, from 0=clear to 1=opaque. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=depth, fill=cut)) + geom_density(alpha=.3)\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nNow we can see that there are some premium cut diamonds with depths around 62. This peak was hidden from us before. \n\nYou could also just color the lines and leave the fill alone. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=depth, color=cut)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWe won't talk about changing colors or the background in this lab, but the yellow is pretty hard to read. \n\n\n#### Grouped boxplots\n\n`ggplot` is happy to do grouped boxplots. Put the continuous variable on the y, categorical on the x. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price_range, y=carat)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n##### Adding violins to the boxplot\nA violin plot is like a density plot, turned on its side, and reflected around the axis for symmetry purposes. Overlaying a boxplot and a violin plot serves a similar purpose to Histograms + Density plots. It shows outliers, the location of most the data, and better shows the shape/skew of the distribution. Let's also `fill` the geometries with the same color as what is on the x-axis. Not 100% needed but nice for display sometimes. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dsmall, aes(x=price_range, y=carat, fill=price_range)) +\n        geom_violin(alpha=.1) + \n        geom_boxplot(alpha=.5, width=.2)\n```\n\n::: {.cell-output-display}\n![](plots_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
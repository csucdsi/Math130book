{
  "hash": "e38290aa6a8451daf79cdd559da5e5fc",
  "result": {
    "engine": "knitr",
    "markdown": "# Working with Factors\n\nIn this lesson we will discuss ways to organize and deal with categorical data, also known as factor data types. <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Intro/1_h8a1glfl\" target=\"_blank\">(Intro Video)</a>\n\n\n\n### Student Learning Objectives\nAfter completing this lesson students will be able to\n\n* Convert a numeric variable to a factor variable. \n* Apply and change labels to factor \n* Understand and control the ordering of the factor. \n* Combine multiple levels of a factor variable into one level\n\n\n## Preparation \n\nPrior to this lesson learners should\n\n* Download the [[factors_notes.qmd]](notes/factors_notes.qmd) Quarto file and save into your `notes/Math130` folder. \n    - Open this in RStudio and ensure the first code chunk will run without error. \n* Install the `forcats` package ([this was done as part of lesson 02](https://norcalbiostat.github.io/MATH130/notes/02_setup_slides.html#19)). \n\nWe're going to use two data sets from the `openintro` package. The `email` data set contains information on emails received by a specific account for the first three months in 2012, and the `fastfood` data set describes nutrition amounts in 515 fast food items. More information can be seen about these data sets by viewing the help files using `?email` and `?fastfood`. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\nemail <- openintro::email\nff    <- openintro::fastfood\n```\n:::\n\n\n\n\n\n\n\n<img src=\"../static/img/forcats.png\" align=\"left\" style=\"margin: 0px 20px 0px 20px;\"/><p> <br><br><br> The goal of the `forcats` package is to provide a suite of useful tools that solve common problems with factors. Often in R there are multiple ways to accomplish the same task. Some examples in this lesson will show how to perform a certain task using base R functions, as well as functions from the `forcats` package. </p>\n\n\n## What is a factor?  <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+What+is+a+FactorF/1_abke2v0c\" target=\"_blank\">(Video)</a>\n\nThe term factor refers to a data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable corresponds to a limited number of categories, while a continuous variable can correspond to an infinite number of values.\n\nAn example of a categorical variable is the `number` variable in the `email` data set. This variable contains data on whether there was no number, a small number (under 1 million), or a big number in the content of the email. \n\nFirst we should confirm that R sees `number` as a factor. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWe can use the `levels()` function to get to know factor variables. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"none\"  \"small\" \"big\"  \n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are three levels: `none`, `small`, and `big`. \n\nHow many records are in each level? There are a few ways we can determine this, here are two: \n\n**Base R**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n none small   big \n  549  2827   545 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n**forcats**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfct_count(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  f         n\n  <fct> <int>\n1 none    549\n2 small  2827\n3 big     545\n```\n\n\n:::\n:::\n\n\n\n\n\n\nNote that `fct_count` also gives you the number of records with that factor level. This is yet another way to generate a frequency table. \n\n\n## Convert a number to Factor  <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Convert+a+Number+to+Factor/1_rfnetvxy\" target=\"_blank\">(Video)</a>\n\nSometimes data are entered into the computer using numeric codes such as 0 and 1. These codes stand for categories, such as \"no\" and \"yes\". Sometimes we want to analyze these binary variables in two ways: \n\n* For statistical analyses, the data must be numeric 0/1.\n* For many graphics, the data must be a factor, \"no/yes\".\n\n**Example: Is the email flagged as spam?**\nThe `spam` variable is recorded as an integer variable with values 0 and 1. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   0    1 \n3554  367 \n```\n\n\n:::\n\n```{.r .cell-code}\nclass(email$spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWe use the function `factor()` to convert the numeric variable `spam` to a factor, applying `labels` to convert 0 to \"no\" and 1 to \"yes\". \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$spam_fac <- factor(email$spam, labels=c(\"no\", \"yes\"))\n```\n:::\n\n\n\n\n\n\nThe ordering of the `labels` argument _must_ be in the same order (left to right) as the factor levels themselves. Look back at the order of columns in the `table` - it goes 0 then 1. Thus our labels need to go \"no\" then \"yes\". \n\n**Always confirm your recode** \n\nHere we confirm that the new variable was created correctly by creating a two-way contingency table by calling the `table(old variable, new variable)` function on both the old and new variables. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$spam, email$spam_fac, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      \n         no  yes <NA>\n  0    3554    0    0\n  1       0  367    0\n  <NA>    0    0    0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nHere we see that all the 0's were recoded to 'no's, and all the 1's recoded to \"yes\"'s, and there are no new missing values. Success!\n\n\n## Factor ordering  <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Factor+Ordering/1_jl8i52iu\" target=\"_blank\">(Video)</a>\nLet's revisit the variable `number`, that contains the size of the number in the email. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n none small   big \n  549  2827   545 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nSpecifically the ordering from left to right of the factors. This is ordinal data, in that `none` is inherently \"smaller\" than `small`, which is smaller than `big`. Though R correctly ordered these data, it may default to alphabetical order in other cases, so beware! You may need to correct the ordering for other data sets.\n\nLet's see a few ways of how to control the ordering. \n\n### Manually specified \nWe need to take control of these factors! We can do that by re-factoring the existing factor variable, but this time specifying the `levels` of the factor (since it already has labels). Say we decide to reverse the order so we go from big to small to none, in decreasing order of size.\n\n**Base R**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(email$number, levels=c(\"big\", \"small\", \"none\")) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n  big small  none \n  545  2827   549 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n**forcats**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$number %>% fct_relevel(\"big\", \"small\", \"none\") %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n  big small  none \n  545  2827   549 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nIn each of these examples, I pipe (`%>%`) the `table()` function at the end so I can see the results of the reordering. \nThis helps me visually confirm that the code used changed the factor levels to be left to right in decreasing content size order. This will be important for graphing. \n\n> Since I did not use the assignment operator (`<-`) here, these changes were not made to the variable in the `email` data set. The examples below demonstrate making an adjustmet to a factor variable and saving that adjustment as a new variable in the data set.\n\n<!---\n## Order by frequency\nThe size of the number in an email is _ordinal_, meaning the levels have an internal order. _Nominal_ categorical\ndata does not have a natural ordering. One preferrable way to order the levels of a nominal variable is by the frequency of the levels. The `forcats` function `fct_infreq()` accomplishes this task. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$number %>% fct_infreq() %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\nsmall  none   big \n 2827   549   545 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nThere are more emails with small numbers in it than there are emails with no numbers, which shows up more often than emails with big numbers. \n\n## Reversed order\n\nAgain, `forcats` to the rescue here. Let's remind ourselves what the original ordering was: \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n none small   big \n  549  2827   545 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nAnd now to reverse this ordering, \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$number %>% fct_rev() %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n  big small  none \n  545  2827   549 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis just *happens* to be the same as in decreasing frequency order. \n\n--->\n\n\n## Factor (re)naming  <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Factor+%28Re%29naming/1_f34h4fuw\" target=\"_blank\">(Video)</a>\n\nSometimes factors come to us in names we don't prefer. We want them to say something else. \n\n**Base R**\nThe easiest way here is to re-factor the variable and apply new `labels`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$my_new_number <- factor(email$number, labels=c( \"None\", \"<1M\",\"1M+\"))\n```\n:::\n\n\n\n\n\n\nOk, but did this work? Trust, but verify. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(email$number, email$my_new_number, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        None  <1M  1M+ <NA>\n  none   549    0    0    0\n  small    0 2827    0    0\n  big      0    0  545    0\n  <NA>     0    0    0    0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThe \"big\" factor is now labeled \"1M+\", \"none\" is named \"None\", and \"small\" is \"<1M\".\n\n**forcats**: use the `fct_recode(\"NEW\" = \"old\")` function here. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail$my_forcats_number <- fct_recode(email$number, \"BIG\" = \"big\", \"NONE\" = \"none\", \"SMALL\" = \"small\")\ntable(email$number, email$my_forcats_number, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        NONE SMALL  BIG <NA>\n  none   549     0    0    0\n  small    0  2827    0    0\n  big      0     0  545    0\n  <NA>     0     0    0    0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Collapsing factor levels <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Collapsing+Factor+Levels/1_23zku0qv\" target=\"_blank\">(Video)</a>\n\nFor analysis purposes, sometimes you want to work with a smaller number of factor variables. Let's look at the restaurants that are included in the `fastfood` data set. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ff$restaurant)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Arbys Burger King Chick Fil-A Dairy Queen   Mcdonalds       Sonic \n         55          70          27          42          57          53 \n     Subway   Taco Bell \n         96         115 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nLet's combine all the sandwich, and burger joints together. I am going to save this new variable as `restaurant_new`. \n\nThe syntax for the `fct_collapse` function is `new level` = `\"old level\"`, where the \"old level\" is in quotes. As always, it is good practice to create a two way table to make sure the code typed does what we expected it to do. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff$restaurant_new <- fct_collapse(ff$restaurant, \n                                    BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                                    Sammich = c(\"Arbys\", \"Subway\"))\n\ntable(ff$restaurant, ff$restaurant_new, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             \n              Sammich BurgerJoint Chick Fil-A Dairy Queen Taco Bell <NA>\n  Arbys            55           0           0           0         0    0\n  Burger King       0          70           0           0         0    0\n  Chick Fil-A       0           0          27           0         0    0\n  Dairy Queen       0           0           0          42         0    0\n  Mcdonalds         0          57           0           0         0    0\n  Sonic             0          53           0           0         0    0\n  Subway           96           0           0           0         0    0\n  Taco Bell         0           0           0           0       115    0\n  <NA>              0           0           0           0         0    0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nLet's take this one step further and shorten the factor names and rename the levels with spaces (like `Taco Bell`). \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff$restaurant_shortname <- fct_recode(ff$restaurant_new, \n                                      \"Ckn\" = \"Chick Fil-A\", \n                                      \"DQ\" = \"Dairy Queen\", \n                                      \"TB\" = \"Taco Bell\", \n                                      \"Samm\" = 'Sammich', \n                                      \"Burg\"= \"BurgerJoint\")\n\ntable(ff$restaurant, ff$restaurant_shortname, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             \n              Samm Burg Ckn  DQ  TB <NA>\n  Arbys         55    0   0   0   0    0\n  Burger King    0   70   0   0   0    0\n  Chick Fil-A    0    0  27   0   0    0\n  Dairy Queen    0    0   0  42   0    0\n  Mcdonalds      0   57   0   0   0    0\n  Sonic          0   53   0   0   0    0\n  Subway        96    0   0   0   0    0\n  Taco Bell      0    0   0   0 115    0\n  <NA>           0    0   0   0   0    0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: .callout-tip\n### Let's chain this all together. \n\nSporadically throughout this lesson, and at the end of the last lesson I've used the pipe `%>%` operator as somewhat of a shortcut. This amazing piece of code lets us string together commands. Let's see how to accomplish both changes to the restaurant variable in one single step. \n:::\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff$restaurant %>% fct_collapse(BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                               Sammich     = c(\"Arbys\", \"Subway\")) %>%\n                  fct_recode(\"Ckn\"  = \"Chick Fil-A\", \n                             \"DQ\"   = \"Dairy Queen\", \n                             \"TB\"   = \"Taco Bell\", \n                             \"Samm\" = 'Sammich', \n                             \"Burg \"= \"BurgerJoint\") %>%\n                  table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n Samm Burg    Ckn    DQ    TB \n  151   180    27    42   115 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nA few things to note when chaining commands together: \n\n1. the first argument (the data or variable) is not included. \n2. the pipe itself must be at the end of a \"sentence\"\n\nDon't worry if this doesn't make immediate sense right now. \nWe'll talk more on chaining commands together in a later lesson. \nThere is no harm in accomplishing a task in more than one step. \n\n\n## Removing factor levels <a href=\"https://media.csuchico.edu/media/MATH+130+-+Lecture+06A+Removing+Factor+Levels/1_dv1a8kgh\" target=\"_blank\">(Video)</a>\n\nSometimes, you don't even want to consider certain levels. This often occurs in survey data where the respondent provides an answer of \"Refuse to answer\" or the data is coded as the word \"missing\". The word \"missing' is fundamentally different than the `NA` code for a missing value. \n\nFor demonstration purposes, let's get rid of the data from DQ. Who eats something other than ice cream at that place anyhow? \n\nThe most straight forward way to set a variable missing based on it's value is to use a logical statement to choose what rows the variable is set to missing. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff$restaurant_shortname[ff$restaurant_shortname == \"DQ\"] <- NA\ntable(ff$restaurant_shortname, useNA=\"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nSamm Burg  Ckn   DQ   TB <NA> \n 151  180   27    0  115   42 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis table shows that there are 42 records missing `restaraunt_shortname`, and 0 records with the level `DQ`. Unfortunately, the level itself still is there. R does not assume just because there are no records with that level, that the named level itself should be removed. We can use the function `fct_drop` to drop the levels with no records. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfct_drop(ff$restaurant_shortname) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\nSamm Burg  Ckn   TB \n 151  180   27  115 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nIf we knew ahead of time we wanted to drop DQ, we could have set that level to `NULL` when we did the initial recode. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nff$restaurant %>% fct_collapse(BurgerJoint = c(\"Burger King\", \"Mcdonalds\", \"Sonic\"), \n                               Sammich = c(\"Arbys\", \"Subway\")) %>%\n                  fct_recode(\"Ckn\"  = \"Chick Fil-A\", \n                              NULL   = \"Dairy Queen\", \n                             \"TB\"   = \"Taco Bell\", \n                             \"Samm\" = 'Sammich', \n                             \"Burg \"= \"BurgerJoint\") %>%\n                  table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n.\n Samm Burg    Ckn    TB \n  151   180    27   115 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}